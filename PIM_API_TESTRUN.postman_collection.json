{
	"info": {
		"_postman_id": "b449da90-b49c-48ae-b732-f28b97bf9f7e",
		"name": "PIM_API_TESTRUN",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Active",
			"item": [
				{
					"name": "001 Creates, Updates, Gets and Deletes a Product",
					"item": [
						{
							"name": "Create a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "079f7d5a-9acc-4e33-aea8-be5281dc4a89",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows created product Primary ID\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Created API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"API_test_product\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{001_FeedAPIKey}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"primaryId\":\"API_test_product\",\n  \"typeId\":\"SKU\",\n  \"schemaId\": \"{{001_SchemaID}}\"\n  }\n\n\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{URL_VERSION}}products",
									"host": [
										"{{URL_VERSION}}products"
									]
								},
								"description": "Create a product using the API"
							},
							"response": []
						},
						{
							"name": "Update product by PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d4a9706-3b07-45fd-893c-49201c257475",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows product thats been updated\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Updated API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"API_test_product\");",
											"});",
											"",
											"pm.test(\"Id is exists\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{001_FeedAPIKey}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"PrimaryDescription\": \"Updating the description via API\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{URL_VERSION}}products/API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"API_test_product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product by Primary ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e9273ab-a069-41f3-90c5-143da8699625",
										"exec": [
											"pm.test(\"Primary ID is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData['Primary ID']).to.eql(\"API_test_product\");",
											"});",
											"",
											"pm.test(\"Primary Description Attribute is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData['Primary Description Attribute']).to.eql(\"Updating the description via API\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.primaryId).to.eql(\"API_test_product\");",
											"});",
											"",
											"",
											"pm.test(\"ID is present\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData._id).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"dateCreated is present\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.dateCreated).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"dateUpdated is present\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.dateUpdated).to.not.be.empty;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{001_ChannelAPIKey}}"
									},
									{
										"key": "extendResponse",
										"type": "text",
										"value": "1"
									},
									{
										"key": "attributes",
										"type": "text",
										"value": "*"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"API_test_product"
									]
								},
								"description": "Gets product by Primary ID"
							},
							"response": []
						},
						{
							"name": "Delete Product By PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0baedaa5-2861-4581-a4b0-5eb685d85ef5",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(200);",
											"});",
											"",
											"pm.test(\"message shows the deleted product\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Deleted product: API_test_product\");",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{001_FeedAPIKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"API_test_product"
									]
								},
								"description": "Deletes a product using the primary ID "
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1b551c58-1650-4474-9b5c-6ea89c409fdf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5c168ecf-a0aa-46d7-bae7-3b8f98bfe37e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "002 Creates a Product with all attributes populated, Gets all attributes and Deletes the Product ",
					"item": [
						{
							"name": "Create a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a01a6106-9369-4de7-ac55-ef6783816e15",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows created product Primary ID\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Created API_test_product_all_attributes\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"API_test_product_all_attributes\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{002_FeedAPIKey}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"primaryId\":\"API_test_product_all_attributes\",\n  \"typeId\":\"SKU\",\n  \"schemaId\":\"{{002_SchemaID}}\",\n  \"attributes\" : {\n\t\t \"PrimaryDescription\": \"Updating the description via API\",\n\t\t  \"PlainTextShortRegular\": \"Text1\",\n\t\t  \"PlainTextShortFreeTypedList\": [\"Text1\",\"Text2\"],\n\t\t  \"PlainTextShortSingleSelectList\": \"value1\",\n\t\t  \"PlainTextShortMultiSelectList\": [\"value1\",\"value2\"], \n\t\t  \"PlainTextShortComboList\": \"value1\",\n\t\t  \"PlainTextShortSingleSelectDataset\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextShortMultiSelectDataset\": [\"ValueDEFAULT1\",\"ValueDEFAULT2\"],\n\t\t  \"PlainTextShortMultiComboList\": [\"freevalue\",\"value1\"],\n\t\t  \"PlainTextShortComboDataset\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextShortMultiComboDataset\": [\"freevalue\",\"ValueDEFAULT1\"],\n\t\t  \"PlainTextShortKeyValuePairs\": { \"key1\": \"value1\" },\n\t\t  \"PlainTextLongRegular\": \"TextLong1\",\n\t\t  \"Table\" : \"Table\",\n\t\t  \"CodeRegular\": \"ABC123\",\n\t\t  \"HTMLRegular\": \"<p>Text1</p>\",\n\t\t  \"NumberRegular\": 1,\n\t\t  \"NumberFreeTypedList\": [111,1],\n\t\t  \"NumberSingleSelectList\": 1,\n\t\t  \"NumberMultiSelectList\": [11,22],\n\t\t  \"NumberComboList\": 1,\n\t\t  \"NumberMultiComboList\": [11,22],\n\t\t  \"NumberSingleSelectDataset\": 1,\n\t\t  \"NumberComboDataset\": 1,\n\t\t  \"NumberMultiSelectDataset\": [1,2],\n\t\t  \"NumberMultiComboDataset\": [1,2],\n\t\t  \"CurrencyRegular\": 1.5,\n\t\t  \"MeasureRegular\": 1,\n\t\t  \"DateRegular\": \"2019-07-19\",\n\t\t  \"TimeRegular\": \"11:00\",\n\t\t  \"DateTimeRegular\": \"2019-07-19T11:00:00.000Z\",\n\t\t  \"TrueorFalseRegular\": true,\n\t\t  \"MediaSet\": \"5da5a3f0688c5a30a1bff4f7\",\n\t\t  \"ProductSet\": \"5dc136f496ebf800172307f8\",\n\t\t  \"URL\": \"test.com\",\n\t\t  \"FreeTypeURL\": [\"test1.com\",\"test2.com\"]\n\t}\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_VERSION}}products",
									"host": [
										"{{URL_VERSION}}products"
									]
								},
								"description": "PROD Create a product using the API"
							},
							"response": []
						},
						{
							"name": "Get product by Primary ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c434279-e579-420a-a183-b7f22f6eebff",
										"exec": [
											"pm.test(\"Primary ID is showing API_test_product_all_attributes\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['Primary ID']).to.eql(\"API_test_product_all_attributes\");",
											"});",
											"",
											"pm.test(\"Primary Description Attribute is showing Updating the description via API\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['Primary Description Attribute']).to.eql(\"Updating the description via API\");",
											"});",
											"",
											"",
											"//TESTING ATTRIBUTES ",
											"",
											"",
											"//Plain Text ",
											"",
											"pm.test(\"PlainTextShortRegular is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextShortRegular).to.eql(\"Text1\");",
											"});",
											"",
											"pm.test(\"PlainTextShortFreeTypedList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"Text1\", \"Text2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextShortFreeTypedList.length; i++) {",
											"        pm.expect(jsonData.PlainTextShortFreeTypedList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextShortSingleSelectList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextShortSingleSelectList).to.eql(\"value1\");",
											"});",
											"",
											"pm.test(\"PlainTextShortMultiSelectList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"value1\", \"value2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextShortMultiSelectList.length; i++) {",
											"        pm.expect(jsonData.PlainTextShortMultiSelectList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"PlainTextShortComboList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextShortComboList).to.eql(\"value1\");",
											"});",
											"",
											"",
											"pm.test(\"PlainTextShortMultiComboList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"freevalue\", \"value1\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextShortMultiComboList.length; i++) {",
											"        pm.expect(jsonData.PlainTextShortMultiComboList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextShortSingleSelectDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextShortSingleSelectDataset).to.eql(\"ValueDEFAULT1\");",
											"});",
											"",
											"pm.test(\"PlainTextShortComboDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextShortSingleSelectDataset).to.eql(\"ValueDEFAULT1\");",
											"});",
											"",
											"",
											"pm.test(\"PlainTextShortMultiSelectDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"ValueDEFAULT1\", \"ValueDEFAULT2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextShortMultiSelectDataset.length; i++) {",
											"        pm.expect(jsonData.PlainTextShortMultiSelectDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"PlainTextShortMultiComboDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"freevalue\", \"ValueDEFAULT1\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextShortMultiComboDataset.length; i++) {",
											"        pm.expect(jsonData.PlainTextShortMultiComboDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"pm.test(\"PlainTextShortKeyValuePairs is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['PlainTextShortKey/ValuePairs'][0]).to.eql(\"value1\");",
											"});",
											"",
											"",
											"pm.test(\"PlainTextLongRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextLongRegular).to.eql(\"TextLong1\");",
											"});",
											"",
											"",
											"",
											"// CODE ATTRIBUTE",
											"",
											"",
											"pm.test(\"CodeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CodeRegular).to.eql(\"ABC123\");",
											"});",
											"",
											"// TABLE ATTRIBUTE",
											"",
											"",
											"pm.test(\"Table is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.Table).to.eql(\"Table\");",
											"});",
											"",
											"",
											"// HTML ATTRIBUTE",
											"",
											"",
											"pm.test(\"HTMLRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.HTMLRegular).to.eql(\"<p>Text1</p>\");",
											"});",
											"",
											"",
											"",
											"//NUMBER ATTRIBUTES",
											"",
											"pm.test(\"NumberRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberRegular).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"NumberFreeTypedList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [111, 1];",
											"",
											"    for (var i = 0; i < jsonData.NumberFreeTypedList.length; i++) {",
											"        pm.expect(jsonData.NumberFreeTypedList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"NumberSingleSelectList is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberSingleSelectList).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"NumberMultiSelectList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [11, 22];",
											"",
											"    for (var i = 0; i < jsonData.NumberMultiSelectList.length; i++) {",
											"        pm.expect(jsonData.NumberMultiSelectList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"NumberComboList is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberComboList).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"NumberMultiComboList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [11, 22];",
											"",
											"    for (var i = 0; i < jsonData.NumberMultiComboList.length; i++) {",
											"        pm.expect(jsonData.NumberMultiComboList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"NumberSingleSelectDataset is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberComboList).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"NumberComboDataset is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberComboDataset).to.eql(1);",
											"});",
											"",
											"",
											"",
											"pm.test(\"NumberMultiSelectDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [1, 2];",
											"",
											"    for (var i = 0; i < jsonData.NumberMultiSelectDataset.length; i++) {",
											"        pm.expect(jsonData.NumberMultiSelectDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"NumberMultiComboDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [1, 2];",
											"",
											"    for (var i = 0; i < jsonData.NumberMultiComboDataset.length; i++) {",
											"        pm.expect(jsonData.NumberMultiComboDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"",
											"// CURRENCY ATTRIBUTE",
											"",
											"",
											"pm.test(\"CurrencyRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CurrencyRegular).to.eql(\"1.50\");",
											"});",
											"",
											"",
											"// MEASURE ATTRIBUTE",
											"",
											"",
											"pm.test(\"MeasureRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MeasureRegular).to.eql(1);",
											"});",
											"",
											"",
											"//DATE AND TIME ATTRIBUTES",
											"",
											"",
											"pm.test(\"DateRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.DateRegular).to.eql(\"2019/07/19\");",
											"});",
											"",
											"",
											"pm.test(\"TimeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TimeRegular).to.eql(\"11:00\");",
											"});",
											"",
											"",
											"pm.test(\"DateTimeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"Date+TimeRegular\"]).to.eql(\"2019/07/19 11:00\");",
											"});",
											"",
											"",
											"",
											"//BOOLEAN ATTRIBUTE",
											"",
											"",
											"pm.test(\"TrueorFalseRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TrueorFalseRegular).to.eql(\"1\");",
											"});",
											"",
											"",
											"// MEDIA SET ",
											"",
											"",
											"pm.test(\"MediaSet is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MediaSet[0]).to.eql(\"https://cdn.preview.pimber.ly/public/asset/raw/5a0edc61963a45000e888630/7d531b65/5d7607c08dcb2b5efa000010.jpg\");",
											"});",
											"",
											"",
											"// PRODUCT SET ",
											"",
											"",
											"pm.test(\"ProductSet is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ProductSet[0]).to.eql(\"DNDProductToBeAdded\");",
											"});",
											"",
											"",
											"",
											"//URL ATTRIBUTES",
											"",
											"",
											"pm.test(\"URL is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.URL).to.eql(\"test.com\");",
											"});",
											"",
											"",
											"pm.test(\"FreeTypeURL is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"test1.com\", \"test2.com\"];",
											"",
											"    for (var i = 0; i < jsonData.FreeTypeURL.length; i++) {",
											"        pm.expect(jsonData.FreeTypeURL[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"followRedirects": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{002_ChannelAPIKey}}"
									},
									{
										"key": "extendResponse",
										"type": "text",
										"value": "1"
									},
									{
										"key": "attributes",
										"type": "text",
										"value": "*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{URL_VERSION}}products/API_test_product_all_attributes",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"API_test_product_all_attributes"
									]
								},
								"description": "Gets product by Primary ID"
							},
							"response": []
						},
						{
							"name": "Delete Product By PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38e80286-54d0-4e53-9b5d-9ad29a03816c",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(200);",
											"});",
											"",
											"pm.test(\"message shows the deleted product\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Deleted product: API_test_product_all_attributes\");",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{002_FeedAPIKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/API_test_product_all_attributes",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"API_test_product_all_attributes"
									]
								},
								"description": "Deletes a product using the primary ID "
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6ba101c3-a314-4dfa-a834-5ff761647810",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7fc20416-d35f-487c-bc23-8ec4d3f0b473",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "003 Creates a Product then updates all attributes, Gets all attributes and Deletes a Product",
					"item": [
						{
							"name": "Create a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7050b991-3c61-4233-ade4-49d7550b8490",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows created product Primary ID\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Created API_test_product_update_all_attributes\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"API_test_product_update_all_attributes\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{003_FeedAPIKey}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"primaryId\":\"API_test_product_update_all_attributes\",\n  \"typeId\":\"SKU\",\n  \"schemaId\":\"{{003_SchemaID}}\"\n  \n }\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_VERSION}}products",
									"host": [
										"{{URL_VERSION}}products"
									]
								},
								"description": "Create a product using the API"
							},
							"response": []
						},
						{
							"name": "Update product by PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5e55564-7070-49d3-9e0b-06e5a1013e58",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows product thats been updated\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Updated API_test_product_update_all_attributes\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"API_test_product_update_all_attributes\");",
											"});",
											"",
											"pm.test(\"id exists\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{003_FeedAPIKey}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"PrimaryDescription\": \"Updating the description via API\",\n\t\t  \"PlainTextShortRegular\": \"Text1\",\n\t\t  \"PlainTextShortFreeTypedList\": [\"Text1\",\"Text2\"],\n\t\t  \"PlainTextShortSingleSelectList\": \"value1\",\n\t\t  \"PlainTextShortMultiSelectList\": [\"value1\",\"value2\"], \n\t\t  \"PlainTextShortComboList\": \"value1\",\n\t\t  \"PlainTextShortSingleSelectDataset\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextShortMultiSelectDataset\": [\"ValueDEFAULT1\",\"ValueDEFAULT2\"],\n\t\t  \"PlainTextShortMultiComboList\": [\"freevalue\",\"value1\"],\n\t\t  \"PlainTextShortComboDataset\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextShortMultiComboDataset\": [\"freevalue\",\"ValueDEFAULT1\"],\n\t\t  \"PlainTextShortKeyValuePairs\": { \"key1\": \"value1\" },\n\t\t  \"PlainTextLongRegular\": \"TextLong1\",\n\t\t  \"Table\" : \"Table\",\n\t\t  \"CodeRegular\": \"ABC123\",\n\t\t  \"HTMLRegular\": \"<p>Text1</p>\",\n\t\t  \"NumberRegular\": 1,\n\t\t  \"NumberFreeTypedList\": [111,1],\n\t\t  \"NumberSingleSelectList\": 1,\n\t\t  \"NumberMultiSelectList\": [11,22],\n\t\t  \"NumberComboList\": 1,\n\t\t  \"NumberMultiComboList\": [11,22],\n\t\t  \"NumberSingleSelectDataset\": 1,\n\t\t  \"NumberComboDataset\": 1,\n\t\t  \"NumberMultiSelectDataset\": [1,2],\n\t\t  \"NumberMultiComboDataset\": [1,2],\n\t\t  \"CurrencyRegular\": 1.5,\n\t\t  \"MeasureRegular\": 1,\n\t\t  \"DateRegular\": \"2019-07-19\",\n\t\t  \"TimeRegular\": \"11:00\",\n\t\t  \"DateTimeRegular\": \"2019-07-19T11:00:00.000Z\",\n\t\t  \"TrueorFalseRegular\": true,\n\t\t  \"MediaSet\": \"5da5a3f0688c5a30a1bff4f7\",\n\t\t  \"ProductSet\": \"5dc136f496ebf800172307f8\",\n\t\t  \"URL\": \"test.com\",\n\t\t  \"FreeTypeURL\": [\"test1.com\",\"test2.com\"]\n \n  \n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{URL_VERSION}}products/API_test_product_update_all_attributes",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"API_test_product_update_all_attributes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product by Primary ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e28b283d-5afc-4350-b433-bee11d258c4b",
										"exec": [
											"pm.test(\"Primary ID is showing API_test_product_all_attributes\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['Primary ID']).to.eql(\"API_test_product_update_all_attributes\");",
											"});",
											"",
											"pm.test(\"Primary Description Attribute is showing Updating the description via API\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['Primary Description Attribute']).to.eql(\"Updating the description via API\");",
											"});",
											"",
											"",
											"//TESTING ATTRIBUTES ",
											"",
											"",
											"//Plain Text ",
											"",
											"pm.test(\"PlainTextShortRegular is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextShortRegular).to.eql(\"Text1\");",
											"});",
											"",
											"pm.test(\"PlainTextShortFreeTypedList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"Text1\", \"Text2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextShortFreeTypedList.length; i++) {",
											"        pm.expect(jsonData.PlainTextShortFreeTypedList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextShortSingleSelectList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextShortSingleSelectList).to.eql(\"value1\");",
											"});",
											"",
											"pm.test(\"PlainTextShortMultiSelectList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"value1\", \"value2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextShortMultiSelectList.length; i++) {",
											"        pm.expect(jsonData.PlainTextShortMultiSelectList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"PlainTextShortComboList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextShortComboList).to.eql(\"value1\");",
											"});",
											"",
											"",
											"pm.test(\"PlainTextShortMultiComboList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"freevalue\", \"value1\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextShortMultiComboList.length; i++) {",
											"        pm.expect(jsonData.PlainTextShortMultiComboList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextShortSingleSelectDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextShortSingleSelectDataset).to.eql(\"ValueDEFAULT1\");",
											"});",
											"",
											"pm.test(\"PlainTextShortComboDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextShortSingleSelectDataset).to.eql(\"ValueDEFAULT1\");",
											"});",
											"",
											"",
											"pm.test(\"PlainTextShortMultiSelectDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"ValueDEFAULT1\", \"ValueDEFAULT2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextShortMultiSelectDataset.length; i++) {",
											"        pm.expect(jsonData.PlainTextShortMultiSelectDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"PlainTextShortMultiComboDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"freevalue\", \"ValueDEFAULT1\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextShortMultiComboDataset.length; i++) {",
											"        pm.expect(jsonData.PlainTextShortMultiComboDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"pm.test(\"PlainTextShortKeyValuePairs is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['PlainTextShortKey/ValuePairs'][0]).to.eql(\"value1\");",
											"});",
											"",
											"",
											"pm.test(\"PlainTextLongRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextLongRegular).to.eql(\"TextLong1\");",
											"});",
											"",
											"",
											"",
											"// CODE ATTRIBUTE",
											"",
											"",
											"pm.test(\"CodeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CodeRegular).to.eql(\"ABC123\");",
											"});",
											"",
											"// TABLE ATTRIBUTE",
											"",
											"",
											"pm.test(\"Table is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.Table).to.eql(\"Table\");",
											"});",
											"",
											"",
											"// HTML ATTRIBUTE",
											"",
											"",
											"pm.test(\"HTMLRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.HTMLRegular).to.eql(\"<p>Text1</p>\");",
											"});",
											"",
											"",
											"",
											"//NUMBER ATTRIBUTES",
											"",
											"pm.test(\"NumberRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberRegular).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"NumberFreeTypedList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [111, 1];",
											"",
											"    for (var i = 0; i < jsonData.NumberFreeTypedList.length; i++) {",
											"        pm.expect(jsonData.NumberFreeTypedList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"NumberSingleSelectList is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberSingleSelectList).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"NumberMultiSelectList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [11, 22];",
											"",
											"    for (var i = 0; i < jsonData.NumberMultiSelectList.length; i++) {",
											"        pm.expect(jsonData.NumberMultiSelectList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"NumberComboList is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberComboList).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"NumberMultiComboList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [11, 22];",
											"",
											"    for (var i = 0; i < jsonData.NumberMultiComboList.length; i++) {",
											"        pm.expect(jsonData.NumberMultiComboList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"NumberSingleSelectDataset is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberComboList).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"NumberComboDataset is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberComboDataset).to.eql(1);",
											"});",
											"",
											"",
											"",
											"pm.test(\"NumberMultiSelectDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [1, 2];",
											"",
											"    for (var i = 0; i < jsonData.NumberMultiSelectDataset.length; i++) {",
											"        pm.expect(jsonData.NumberMultiSelectDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"NumberMultiComboDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [1, 2];",
											"",
											"    for (var i = 0; i < jsonData.NumberMultiComboDataset.length; i++) {",
											"        pm.expect(jsonData.NumberMultiComboDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"",
											"// CURRENCY ATTRIBUTE",
											"",
											"",
											"pm.test(\"CurrencyRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CurrencyRegular).to.eql(\"1.50\");",
											"});",
											"",
											"",
											"// MEASURE ATTRIBUTE",
											"",
											"",
											"pm.test(\"MeasureRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MeasureRegular).to.eql(1);",
											"});",
											"",
											"",
											"//DATE AND TIME ATTRIBUTES",
											"",
											"",
											"pm.test(\"DateRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.DateRegular).to.eql(\"2019/07/19\");",
											"});",
											"",
											"",
											"pm.test(\"TimeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TimeRegular).to.eql(\"11:00\");",
											"});",
											"",
											"",
											"pm.test(\"DateTimeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"Date+TimeRegular\"]).to.eql(\"2019/07/19 11:00\");",
											"});",
											"",
											"",
											"",
											"//BOOLEAN ATTRIBUTE",
											"",
											"",
											"pm.test(\"TrueorFalseRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TrueorFalseRegular).to.eql(\"1\");",
											"});",
											"",
											"",
											"// MEDIA SET ",
											"",
											"",
											"pm.test(\"MediaSet is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MediaSet[0]).to.eql(\"https://cdn.preview.pimber.ly/public/asset/raw/5a0edc61963a45000e888630/7d531b65/5d7607c08dcb2b5efa000010.jpg\");",
											"});",
											"",
											"",
											"// PRODUCT SET ",
											"",
											"",
											"pm.test(\"ProductSet is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ProductSet[0]).to.eql(\"DNDProductToBeAdded\");",
											"});",
											"",
											"",
											"",
											"//URL ATTRIBUTES",
											"",
											"",
											"pm.test(\"URL is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.URL).to.eql(\"test.com\");",
											"});",
											"",
											"",
											"pm.test(\"FreeTypeURL is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"test1.com\", \"test2.com\"];",
											"",
											"    for (var i = 0; i < jsonData.FreeTypeURL.length; i++) {",
											"        pm.expect(jsonData.FreeTypeURL[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{003_ChannelAPIKey}}"
									},
									{
										"key": "extendResponse",
										"type": "text",
										"value": "1"
									},
									{
										"key": "attributes",
										"type": "text",
										"value": "*"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/API_test_product_update_all_attributes",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"API_test_product_update_all_attributes"
									]
								},
								"description": "Gets product by Primary ID"
							},
							"response": []
						},
						{
							"name": "Delete Product By PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f35e3861-5e1c-4ed9-a07d-e80766b77249",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(200);",
											"});",
											"",
											"pm.test(\"message shows the deleted product\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Deleted product: API_test_product_update_all_attributes\");",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{003_FeedAPIKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/API_test_product_update_all_attributes",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"API_test_product_update_all_attributes"
									]
								},
								"description": "Deletes a product using the primary ID "
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ce22df0b-4fc9-4a96-9252-e790b57d5e5c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a20fc0e4-26d2-438e-bd47-c06c303fa6d9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "004  Creates, Updates Product Type, and Deletes",
					"item": [
						{
							"name": "Create a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d9f4cbb-3915-4613-858c-e3df744b2d3a",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows created product Primary ID\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Created 04API_test_product_typeID\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"04API_test_product_typeID\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{004_FeedAPIKey}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"primaryId\":\"04API_test_product_typeID\",\n  \"typeId\":\"SKU\",\n  \"schemaId\":\"5dc161cb96ebf800172308aa\"\n  }\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{URL_VERSION}}products",
									"host": [
										"{{URL_VERSION}}products"
									]
								},
								"description": "Create a product using the API"
							},
							"response": []
						},
						{
							"name": "Update product by PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e222a24b-f79d-4591-aa7d-e462beb424e1",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows product thats been updated\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Updated 04API_test_product_typeID\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"04API_test_product_typeID\");",
											"});",
											"",
											"pm.test(\"Id is exists\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{004_FeedAPIKey}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"typeId\": \"Item Group\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{URL_VERSION}}products/04API_test_product_typeID",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"04API_test_product_typeID"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product by Primary ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50dc4382-0878-41fd-a644-de6aa7dea698",
										"exec": [
											"pm.test(\"Primary ID is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData['Primary ID']).to.eql(\"04API_test_product_typeID\");",
											"});",
											"",
											"pm.test(\"Product Type is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData['Product Type']).to.eql(\"Item Group\");",
											"});",
											"",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.primaryId).to.eql(\"04API_test_product_typeID\");",
											"});",
											"",
											"",
											"pm.test(\"ID is present\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData._id).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"dateCreated is present\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.dateCreated).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"dateUpdated is present\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.dateUpdated).to.not.be.empty;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{004_ChannelAPIKey}}"
									},
									{
										"key": "extendResponse",
										"type": "text",
										"value": "1"
									},
									{
										"key": "attributes",
										"type": "text",
										"value": "*"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/04API_test_product_typeID",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"04API_test_product_typeID"
									]
								},
								"description": "Gets product by Primary ID"
							},
							"response": []
						},
						{
							"name": "Delete Product By PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6e5e1b7-f192-4f11-bb40-071d8c051ecf",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(200);",
											"});",
											"",
											"pm.test(\"message shows the deleted product\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Deleted product: 04API_test_product_typeID\");",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{004_FeedAPIKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/04API_test_product_typeID",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"04API_test_product_typeID"
									]
								},
								"description": "Deletes a product using the primary ID "
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "125a78d1-a285-4f5c-800b-5d11ac4cd773",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "89167495-0012-4e0a-a585-33314bc922f4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "005 Creates, Updates Schema, and Deletes",
					"item": [
						{
							"name": "Create a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10dc25ef-1aec-42dc-99a4-b5ace506280e",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows created product Primary ID\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Created 05API_test_product_schemaID\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"05API_test_product_schemaID\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{005_FeedAPIKey}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"primaryId\":\"05API_test_product_schemaID\",\n  \"typeId\":\"SKU\",\n  \"schemaId\":\"{{005_SchemaID}}\",\n  \"attributes\" : {\n  \n  \"PlainTextShortRegular\": \"RemoveMe\"\n  \t\n  \t\n  }\n  }\n"
								},
								"url": {
									"raw": "{{URL_VERSION}}products",
									"host": [
										"{{URL_VERSION}}products"
									]
								},
								"description": "Create a product using the API"
							},
							"response": []
						},
						{
							"name": "Update product by PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "523a07dd-262e-4613-b0f4-5df760e58499",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows product thats been updated\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Updated 05API_test_product_schemaID\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"05API_test_product_schemaID\");",
											"});",
											"",
											"pm.test(\"Id is exists\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "ZceoP5fgOsWDft3CHZ0e8eliTNnPIPqSBxKaBkZpD4ZSB3d3aKNQZ9IBskRIrdon",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"schemaId\": \"{{001_SchemaID}}\"\n}"
								},
								"url": {
									"raw": "{{URL_VERSION}}products/05API_test_product_schemaID",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"05API_test_product_schemaID"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product by Primary ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4506722-c654-45bb-8ae6-ba567a5451c4",
										"exec": [
											"pm.test(\"Primary ID is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData['Primary ID']).to.eql(\"05API_test_product_schemaID\");",
											"});",
											"",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.primaryId).to.eql(\"05API_test_product_schemaID\");",
											"});",
											"",
											"",
											"pm.test(\"ID is present\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData._id).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"dateCreated is present\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.dateCreated).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"dateUpdated is present\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.dateUpdated).to.not.be.empty;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{005_ChannelAPIKey}}"
									},
									{
										"key": "extendResponse",
										"type": "text",
										"value": "1"
									},
									{
										"key": "attributes",
										"type": "text",
										"value": "*"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/05API_test_product_schemaID",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"05API_test_product_schemaID"
									]
								},
								"description": "Gets product by Primary ID"
							},
							"response": []
						},
						{
							"name": "Delete Product By PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c99474ea-86ca-4bb3-bbce-3b28b1a81bd6",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(200);",
											"});",
											"",
											"pm.test(\"message shows the deleted product\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Deleted product: 05API_test_product_schemaID\");",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{005_FeedAPIKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/05API_test_product_schemaID",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"05API_test_product_schemaID"
									]
								},
								"description": "Deletes a product using the primary ID "
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a70a2037-838a-44ec-aed9-296dd160b263",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dc645a0f-0519-489a-9173-48874b964fff",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "006 All attributes with a source of ANY can be populated via API Feed A",
					"item": [
						{
							"name": "Create a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d787eab-0d70-443f-b196-cfa66589804c",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows created product Primary ID\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Created 006_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"006_API_test_product\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{FEED_A_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"primaryId\":\"006_API_test_product\",\n  \"typeId\":\"SKU\",\n  \"schemaId\":\"{{006_SchemaID}}\",\n  \"attributes\" : {\n  \t\n  \t\"PrimaryDescription\" : \"Updated\"\n  \t\n  \t\n  }\n\n\n\n  \n }\n"
								},
								"url": {
									"raw": "{{URL_VERSION}}products",
									"host": [
										"{{URL_VERSION}}products"
									]
								},
								"description": "Create a product using the API"
							},
							"response": []
						},
						{
							"name": "Update product by PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1282ab83-0540-4833-b82d-ae9beb71e5fa",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows product thats been updated\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Updated 006_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"006_API_test_product\");",
											"});",
											"",
											"pm.test(\"id exists\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{FEED_A_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n\t\t  \"PlainTextRegular006\": \"Text1\",\n\t\t  \"PlainTextFreeTypedList006\": [\"Text1\",\"Text2\"],\n\t\t  \"PlainTextSingleSelectList006\": \"value1\",\n\t\t  \"PlainTextMultiSelectList006\": [\"value1\",\"value2\"], \n\t\t  \"PlainTextComboList006\": \"value1\",\n\t\t  \"PlainTextSingleSelectDataset006\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextMultiSelectDataset006\": [\"ValueDEFAULT1\",\"ValueDEFAULT2\"],\n\t\t  \"PlainTextMultiComboList006\": [\"freevalue\",\"value1\"],\n\t\t  \"PlainTextComboDataset006\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextMultiComboDataset006\": [\"freevalue\",\"ValueDEFAULT1\"],\n\t\t  \"PlainTextKeyValuePairs006\": { \"key1\": \"value1\" },\n\t\t  \"Table006\" : \"Table\", \n\t\t  \"CodeRegular006\": \"ABC123\",\n\t\t  \"HTMLRegular006\": \"<p>Text1</p>\",\n\t\t  \"NumberRegular006\": 1,\n\t\t  \"NumberFreeTypedList006\": [111,1],\n\t\t  \"NumberSingleSelectDataset006\": 1,\n\t\t  \"CurrencyRegular006\": 1.5,\n\t\t  \"MeasureWeightgRegular006\": 1,\n\t\t  \"DateRegular006\": \"2019-07-19\",\n\t\t  \"TimeRegular006\": \"11:00\",\n\t\t  \"DateTimeRegular006\": \"2019-07-19T11:00:00.000Z\",\n\t\t  \"TrueorFalseRegular006\": true,\n\t\t  \"MediaSet006\": \"5da5a3f0688c5a30a1bff4f7\",\n\t\t  \"ProductSet006\": \"5dc136f496ebf800172307f8\",\n\t\t  \"URL006\": \"test.com\",\n\t\t  \"FreeTypeURL006\": [\"test1.com\",\"test2.com\"]\n \n  \n}"
								},
								"url": {
									"raw": "{{URL_VERSION}}products/006_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"006_API_test_product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product by Primary ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f61b6e6-732d-4c81-9cb5-dde320678640",
										"exec": [
											"pm.test(\"Primary ID is showing 006_API_test_product\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['Primary ID']).to.eql(\"006_API_test_product\");",
											"});",
											"",
											"//TESTING ATTRIBUTES ",
											"",
											"",
											"//Plain Text ",
											"",
											"pm.test(\"PlainTextRegular is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextRegular).to.eql(\"Text1\");",
											"});",
											"",
											"pm.test(\"PlainTextFreeTypedList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"Text1\", \"Text2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextFreeTypedList.length; i++) {",
											"        pm.expect(jsonData.PlainTextFreeTypedList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextSingleSelectList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextSingleSelectList).to.eql(\"value1\");",
											"});",
											"",
											"pm.test(\"PlainTextMultiSelectList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"value1\", \"value2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiSelectList.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiSelectList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"PlainTextComboList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextComboList).to.eql(\"value1\");",
											"});",
											"",
											"",
											"pm.test(\"PlainTextMultiComboList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"freevalue\", \"value1\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiComboList.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiComboList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextSingleSelectDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextSingleSelectDataset).to.eql(\"ValueDEFAULT1\");",
											"});",
											"",
											"pm.test(\"PlainTextComboDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextComboDataset).to.eql(\"ValueDEFAULT1\");",
											"});",
											"",
											"",
											"pm.test(\"PlainTextMulitSelectDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"ValueDEFAULT1\", \"ValueDEFAULT2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiSelectDataset.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiSelectDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"PlainTextMultiComboDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"freevalue\", \"ValueDEFAULT1\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiComboDataset.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiComboDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"PlainTextKey/ValuePairs is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['PlainTextKey/ValuePairs']['key1']).is.to.equal(\"value1\");",
											"});",
											"",
											"",
											"",
											"// CODE ATTRIBUTE",
											"",
											"",
											"pm.test(\"CodeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CodeRegular).to.eql(\"ABC123\");",
											"});",
											"",
											"// TABLE ATTRIBUTE",
											"",
											"",
											"pm.test(\"Table is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.Table).to.eql(\"Table\");",
											"});",
											"",
											"",
											"// HTML ATTRIBUTE",
											"",
											"",
											"pm.test(\"HTMLRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.HTMLRegular).to.eql(\"<p>Text1</p>\");",
											"});",
											"",
											"",
											"",
											"//NUMBER ATTRIBUTES",
											"",
											"pm.test(\"NumberRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberRegular).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"NumberFreeTypedList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [111, 1];",
											"",
											"    for (var i = 0; i < jsonData.NumberFreeTypedList.length; i++) {",
											"        pm.expect(jsonData.NumberFreeTypedList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"NumberSingleSelectDataset is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberSingleSelectDataset).to.eql(1);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"// CURRENCY ATTRIBUTE",
											"",
											"",
											"pm.test(\"CurrencyRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CurrencyRegular).to.eql(\"1.50\");",
											"});",
											"",
											"",
											"// MEASURE ATTRIBUTE",
											"",
											"",
											"pm.test(\"MeasureRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MeasureRegular).to.eql(1);",
											"});",
											"",
											"",
											"//DATE AND TIME ATTRIBUTES",
											"",
											"",
											"pm.test(\"DateRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.DateRegular).to.eql(\"2019/07/19\");",
											"});",
											"",
											"",
											"pm.test(\"TimeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TimeRegular).to.eql(\"11:00\");",
											"});",
											"",
											"",
											"pm.test(\"DateTimeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"Date + Time\"]).to.eql(\"2019/07/19 11:00\");",
											"});",
											"",
											"",
											"",
											"//BOOLEAN ATTRIBUTE",
											"",
											"",
											"pm.test(\"TrueorFalseRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TrueorFalseRegular).to.eql(\"1\");",
											"});",
											"",
											"",
											"// MEDIA SET ",
											"",
											"",
											"pm.test(\"MediaSet is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MediaSet[0]).to.eql(\"https://cdn.preview.pimber.ly/public/asset/raw/5a0edc61963a45000e888630/7d531b65/5d7607c08dcb2b5efa000010.jpg\");",
											"});",
											"",
											"",
											"// PRODUCT SET ",
											"",
											"",
											"pm.test(\"ProductSet is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ProductSet[0]).to.eql(\"DNDProductToBeAdded\");",
											"});",
											"",
											"",
											"",
											"//URL ATTRIBUTES",
											"",
											"",
											"pm.test(\"URL is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.URL).to.eql(\"test.com\");",
											"});",
											"",
											"",
											"pm.test(\"FreeTypeURL is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"test1.com\", \"test2.com\"];",
											"",
											"    for (var i = 0; i < jsonData.FreeTypeURL.length; i++) {",
											"        pm.expect(jsonData.FreeTypeURL[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{006_ChannelAPIKey}}"
									},
									{
										"key": "extendResponse",
										"type": "text",
										"value": "1"
									},
									{
										"key": "attributes",
										"type": "text",
										"value": "*"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/006_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"006_API_test_product"
									]
								},
								"description": "Gets product by Primary ID"
							},
							"response": []
						},
						{
							"name": "Delete Product By PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9127f906-3db8-4eee-9865-02873801eaed",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(200);",
											"});",
											"",
											"pm.test(\"message shows the deleted product\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Deleted product: 006_API_test_product\");",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{FEED_A_KEY}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/006_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"006_API_test_product"
									]
								},
								"description": "Deletes a product using the primary ID "
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "baa4f983-2e3e-49aa-95ce-d2f6151c3bde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "43bf8204-468e-4623-b04d-77b8ebb5bed2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "007 All attributes with a source of PIMBERLY USERS cannot be populated via API Feed A",
					"item": [
						{
							"name": "Create a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56bd25b6-9db2-4f9e-93d6-a37916fced00",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows created product Primary ID\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Created 007_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"007_API_test_product\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{FEED_A_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"primaryId\":\"007_API_test_product\",\n  \"typeId\":\"SKU\",\n  \"schemaId\":\"{{007_SchemaID}}\",\n  \"attributes\" : {\n  \t\n  \t\"PrimaryDescription\" : \"Updated\"\n  \t\n  \t\n  }\n\n\n\n  \n }\n"
								},
								"url": {
									"raw": "{{URL_VERSION}}products",
									"host": [
										"{{URL_VERSION}}products"
									]
								},
								"description": "Create a product using the API"
							},
							"response": []
						},
						{
							"name": "Update product by PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51b36db7-2586-4caa-89e2-ca60a3c50038",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows product thats been updated\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Updated 007_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"007_API_test_product\");",
											"});",
											"",
											"pm.test(\"id exists\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{FEED_A_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n\t\t  \"PlainTextRegular007\": \"Text1\",\n\t\t  \"PlainTextFreeTypedList007\": [\"Text1\",\"Text2\"],\n\t\t  \"PlainTextSingleSelectList007\": \"value1\",\n\t\t  \"PlainTextMultiSelectList007\": [\"value1\",\"value2\"], \n\t\t  \"PlainTextComboList007\": \"value1\",\n\t\t  \"PlainTextSingleSelectDataset007\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextMultiSelectDataset007\": [\"ValueDEFAULT1\",\"ValueDEFAULT2\"],\n\t\t  \"PlainTextMultiComboList007\": [\"freevalue\",\"value1\"],\n\t\t  \"PlainTextComboDataset007\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextMultiComboDataset007\": [\"freevalue\",\"ValueDEFAULT1\"],\n\t\t  \"PlainTextKeyValuePairs007\": { \"key1\": \"value1\" },\n\t\t  \"Table\" : \"Table\", \n\t\t  \"CodeRegular007\": \"ABC123\",\n\t\t  \"HTMLRegular007\": \"<p>Text1</p>\",\n\t\t  \"NumberRegular007\": 1,\n\t\t  \"NumberFreeTypedList007\": [111,1],\n\t\t  \"NumberSingleSelectDataset007\": 1,\n\t\t  \"CurrencyRegular007\": 1.5,\n\t\t  \"MeasureWeightgRegular007\": 1,\n\t\t  \"DateRegular007\": \"2019-07-19\",\n\t\t  \"TimeRegular007\": \"11:00\",\n\t\t  \"DateTimeRegular007\": \"2019-07-19T11:00:00.000Z\",\n\t\t  \"TrueorFalseRegular007\": true,\n\t\t  \"MediaSet007\": \"https://s3-eu-west-1.amazonaws.com/cdn.preview.aws.eu-w1.pimberly.com/public/asset/raw/5a0edc61963a45000e888630/3992db4f/5d94adbf42d26c0017ec39bb.JPG\",\n\t\t  \"ProductSet007\": \"DNDProductToBeAdded\",\n\t\t  \"URL007\": \"test.com\",\n\t\t  \"FreeTypeURL007\": [\"test1.com\",\"test2.com\"]\n \n  \n}"
								},
								"url": {
									"raw": "{{URL_VERSION}}products/007_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"007_API_test_product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product by Primary ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8aeb15dd-46e1-4bd6-9868-b05517a6af2d",
										"exec": [
											"pm.test(\"Primary ID is showing 006_API_test_product\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['Primary ID']).to.eql(\"007_API_test_product\");",
											"});",
											"",
											"//TESTING ATTRIBUTES ",
											"",
											"",
											"// Started checking to see if value exist, which they shouldnt ",
											"",
											"",
											"",
											"//Plain Text ",
											"",
											"pm.test(\"PlainTextRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextRegular).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextFreeTypedList does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextFreeTypedList).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextSingleSelectList does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextSingleSelectList).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextMultiSelectList does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextMultiSelectList).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextComboList does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextComboList).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextMultiComboList does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextMultiComboList).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextSingleSelectDataset does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextSingleSelectDataset).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextComboDataset does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextComboDataset).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextMultiSelectDataset does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextMultiSelectDataset).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextMultiComboDataset does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextMultiComboDataset).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextKey/ValuePairs does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['PlainTextKey/ValuePairs']).does.not.exist;",
											"});",
											"",
											"",
											"",
											"// // CODE ATTRIBUTE",
											"",
											"",
											"pm.test(\"CodeRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CodeRegular).does.not.exist;",
											"});",
											"",
											"// // TABLE ATTRIBUTE",
											"",
											"",
											"pm.test(\"Table does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.Table).does.not.exist;",
											"});",
											"",
											"",
											"// // HTML ATTRIBUTE",
											"",
											"",
											"pm.test(\"HTMLRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.HTMLRegular).does.not.exist;",
											"});",
											"",
											"",
											"",
											"// //NUMBER ATTRIBUTES",
											"",
											"pm.test(\"NumberRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberRegular).does.not.exist;",
											"});",
											"",
											"",
											"pm.test(\"NumberFreeTypedList does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberFreeTypedList).does.not.exist;",
											"});",
											"",
											"pm.test(\"NumberSingleSelectDataset does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberSingleSelectDataset).does.not.exist;",
											"});",
											"",
											"",
											"",
											"// // CURRENCY ATTRIBUTE",
											"",
											"",
											"pm.test(\"CurrencyRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CurrencyRegular).does.not.exist;",
											"});",
											"",
											"",
											"// // MEASURE ATTRIBUTE",
											"",
											"",
											"pm.test(\"MeasureRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MeasureRegular).does.not.exist;",
											"});",
											"",
											"",
											"// //DATE AND TIME ATTRIBUTES",
											"",
											"",
											"pm.test(\"DateRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.DateRegular).does.not.exist;",
											"});",
											"",
											"",
											"pm.test(\"TimeRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TimeRegular).does.not.exist;",
											"});",
											"",
											"",
											"pm.test(\"DateTimeRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"Date + Time\"]).does.not.exist;",
											"});",
											"",
											"",
											"",
											"// //BOOLEAN ATTRIBUTE",
											"",
											"",
											"pm.test(\"TrueorFalseRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TrueorFalseRegular).does.not.exist;",
											"});",
											"",
											"",
											"// // MEDIA SET ",
											"",
											"",
											"pm.test(\"MediaSet does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MediaSet).does.not.exist;",
											"});",
											"",
											"",
											"// // PRODUCT SET ",
											"",
											"",
											"pm.test(\"ProductSet does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ProductSet).does.not.exist;",
											"});",
											"",
											"",
											"",
											"// //URL ATTRIBUTES",
											"",
											"",
											"pm.test(\"URL does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.URL).does.not.exist;",
											"});",
											"",
											"pm.test(\"FreeTypeURL does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.FreeTypeURL).does.not.exist;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{007_ChannelAPIKey}}"
									},
									{
										"key": "extendResponse",
										"type": "text",
										"value": "1"
									},
									{
										"key": "attributes",
										"type": "text",
										"value": "*"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/007_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"007_API_test_product"
									]
								},
								"description": "Gets product by Primary ID"
							},
							"response": []
						},
						{
							"name": "Delete Product By PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1bc90ee-5ac1-4d52-9e0f-971f9452fe7d",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.status).to.eql(200);",
											"});",
											"",
											"pm.test(\"message shows the deleted product\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.message).to.eql(\"Deleted product: 007_API_test_product\");",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{FEED_A_KEY}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/007_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"007_API_test_product"
									]
								},
								"description": "Deletes a product using the primary ID "
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "60a9985e-32fb-4ff6-9d5b-adb424f4e2c3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9354a797-1634-4929-9afb-7cef67b64263",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "008 All attributes with a source of FEED A, a master of ANY, NOT populated, can be populated via API Feed A",
					"item": [
						{
							"name": "Create a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34411413-a9f5-4920-ba34-ffce127dbf74",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows created product Primary ID\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Created 008_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"008_API_test_product\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{FEED_A_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"primaryId\":\"008_API_test_product\",\n  \"typeId\":\"SKU\",\n  \"schemaId\":\"{{008_SchemaID}}\",\n  \"attributes\" : {\n  \t\n  \t\"PrimaryDescription\" : \"Updated\"\n  \t\n  \t\n  }\n\n\n\n  \n }\n"
								},
								"url": {
									"raw": "{{URL_VERSION}}products",
									"host": [
										"{{URL_VERSION}}products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update product by PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2219e5cd-4f0b-4f5c-bd3a-eff00fa164f8",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows product thats been updated\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Updated 008_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"008_API_test_product\");",
											"});",
											"",
											"pm.test(\"id exists\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{FEED_A_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n\t\t  \"PlainTextRegular008\": \"Text1\",\n\t\t  \"PlainTextFreeTypedList008\": [\"Text1\",\"Text2\"],\n\t\t  \"PlainTextSingleSelectList008\": \"value1\",\n\t\t  \"PlainTextMultiSelectList008\": [\"value1\",\"value2\"], \n\t\t  \"PlainTextComboList008\": \"value1\",\n\t\t  \"PlainTextSingleSelectDataset008\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextMultiSelectDataset008\": [\"ValueDEFAULT1\",\"ValueDEFAULT2\"],\n\t\t  \"PlainTextMultiComboList008\": [\"freevalue\",\"value1\"],\n\t\t  \"PlainTextComboDataset008\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextMultiComboDataset008\": [\"freevalue\",\"ValueDEFAULT1\"],\n\t\t  \"PlainTextKeyValuePairs008\": { \"key1\": \"value1\" },\n\t\t  \"Table008\" : \"Table\", \n\t\t  \"CodeRegular008\": \"ABC123\",\n\t\t  \"HTMLRegular008\": \"<p>Text1</p>\",\n\t\t  \"NumberRegular008\": 1,\n\t\t  \"NumberFreeTypedList008\": [111,1],\n\t\t  \"NumberSingleSelectDataset008\": 1,\n\t\t  \"CurrencyRegular008\": 1.5,\n\t\t  \"MeasureRegular008\": 1,\n\t\t  \"DateRegular008\": \"2019-07-19\",\n\t\t  \"TimeRegular008\": \"11:00\",\n\t\t  \"DateTimeRegular008\": \"2019-07-19T11:00:00.000Z\",\n\t\t  \"TrueorFalseRegular008\": true,\n\t\t  \"Media008\": \"5da5a3f0688c5a30a1bff4f7\",\n\t\t  \"ProductSet008\": \"5dc136f496ebf800172307f8\",\n\t\t  \"URL008\": \"test.com\",\n\t\t  \"FreeTypeURL008\": [\"test1.com\",\"test2.com\"]\n \n  \n}"
								},
								"url": {
									"raw": "{{URL_VERSION}}products/008_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"008_API_test_product"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a37ac1e-1546-441f-89ba-8e09c0621108",
										"exec": [
											"pm.test(\"Primary ID is showing 008_API_test_product\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['Primary ID']).to.eql(\"008_API_test_product\");",
											"});",
											"",
											"//TESTING ATTRIBUTES ",
											"",
											"",
											"//Plain Text ",
											"",
											"pm.test(\"PlainTextRegular is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextRegular).to.eql(\"Text1\");",
											"});",
											"",
											"pm.test(\"PlainTextFreeTypedList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"Text1\", \"Text2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextFreeTypedList.length; i++) {",
											"        pm.expect(jsonData.PlainTextFreeTypedList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextSingleSelectList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextSingleSelectList).to.eql(\"value1\");",
											"});",
											"",
											"pm.test(\"PlainTextMultiSelectList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"value1\", \"value2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiSelectList.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiSelectList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"PlainTextComboList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextComboList).to.eql(\"value1\");",
											"});",
											"",
											"",
											"pm.test(\"PlainTextMultiComboList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"freevalue\", \"value1\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiComboList.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiComboList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextSingleSelectDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextSingleSelectDataset).to.eql(\"ValueDEFAULT1\");",
											"});",
											"",
											"pm.test(\"PlainTextComboDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextComboDataset).to.eql(\"ValueDEFAULT1\");",
											"});",
											"",
											"",
											"pm.test(\"PlainTextMulitSelectDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"ValueDEFAULT1\", \"ValueDEFAULT2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiSelectDataset.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiSelectDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"PlainTextMultiComboDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"freevalue\", \"ValueDEFAULT1\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiComboDataset.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiComboDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextKey/ValuePairs is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"value1\"];",
											"",
											"    for (var i = 0; i < jsonData['PlainTextKey/ValuePairs'].length; i++) {",
											"        pm.expect(jsonData['PlainTextKey/ValuePairs'][i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"// CODE ATTRIBUTE",
											"",
											"",
											"pm.test(\"CodeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CodeRegular).to.eql(\"ABC123\");",
											"});",
											"",
											"// TABLE ATTRIBUTE",
											"",
											"",
											"pm.test(\"Table is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.Table).to.eql(\"Table\");",
											"});",
											"",
											"",
											"// HTML ATTRIBUTE",
											"",
											"",
											"pm.test(\"HTMLRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.HTMLRegular).to.eql(\"<p>Text1</p>\");",
											"});",
											"",
											"",
											"",
											"//NUMBER ATTRIBUTES",
											"",
											"pm.test(\"NumberRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberRegular).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"NumberFreeTypedList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [111, 1];",
											"",
											"    for (var i = 0; i < jsonData.NumberFreeTypedList.length; i++) {",
											"        pm.expect(jsonData.NumberFreeTypedList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"NumberSingleSelectDataset is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberSingleSelectDataset).to.eql(1);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"// CURRENCY ATTRIBUTE",
											"",
											"",
											"pm.test(\"CurrencyRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CurrencyRegular).to.eql(\"1.50\");",
											"});",
											"",
											"",
											"// MEASURE ATTRIBUTE",
											"",
											"",
											"pm.test(\"MeasureRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MeasureRegular).to.eql(1);",
											"});",
											"",
											"",
											"//DATE AND TIME ATTRIBUTES",
											"",
											"",
											"pm.test(\"DateRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.DateRegular).to.eql(\"2019/07/19\");",
											"});",
											"",
											"",
											"pm.test(\"TimeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TimeRegular).to.eql(\"11:00\");",
											"});",
											"",
											"",
											"pm.test(\"DateTimeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"Date + Time\"]).to.eql(\"2019/07/19 11:00\");",
											"});",
											"",
											"",
											"",
											"//BOOLEAN ATTRIBUTE",
											"",
											"",
											"pm.test(\"TrueorFalseRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TrueorFalseRegular).to.eql(\"1\");",
											"});",
											"",
											"",
											"// MEDIA SET ",
											"",
											"",
											"pm.test(\"MediaSet is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MediaSet[0]).to.eql(\"https://cdn.preview.pimber.ly/public/asset/raw/5a0edc61963a45000e888630/7d531b65/5d7607c08dcb2b5efa000010.jpg\");",
											"});",
											"",
											"",
											"// PRODUCT SET ",
											"",
											"",
											"pm.test(\"ProductSet is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ProductSet[0]).to.eql(\"DNDProductToBeAdded\");",
											"});",
											"",
											"",
											"",
											"//URL ATTRIBUTES",
											"",
											"",
											"pm.test(\"URL is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.URL).to.eql(\"test.com\");",
											"});",
											"",
											"",
											"pm.test(\"FreeTypeURL is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"test1.com\", \"test2.com\"];",
											"",
											"    for (var i = 0; i < jsonData.FreeTypeURL.length; i++) {",
											"        pm.expect(jsonData.FreeTypeURL[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{008_ChannelAPIKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/008_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"008_API_test_product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Product by PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00a590fc-12d6-4497-8388-814488463f8b",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.status).to.eql(200);",
											"});",
											"",
											"pm.test(\"message shows the deleted product\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.message).to.eql(\"Deleted product: 008_API_test_product\");",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{FEED_A_KEY}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/008_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"008_API_test_product"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "009 All attributes with a source of FEED A, a master of FEED A, NOT populated, cannot be populated via API FEED B",
					"item": [
						{
							"name": "Create a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2baba500-3056-4e18-93bf-2dc8381569cb",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows created product Primary ID\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Created 009_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"009_API_test_product\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{FEED_A_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"primaryId\":\"009_API_test_product\",\n  \"typeId\":\"SKU\",\n  \"schemaId\":\"{{009_SchemaID}}\",\n  \"attributes\" : {\n  \t\n  \t\"PrimaryDescription\" : \"Updated\"\n  \t\n  \t\n  }\n\n\n\n  \n }"
								},
								"url": {
									"raw": "{{URL_VERSION}}products",
									"host": [
										"{{URL_VERSION}}products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update product by PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b49bd3e-e028-43f3-8c2d-45542c6c0988",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows product thats been updated\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Updated 009_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"009_API_test_product\");",
											"});",
											"",
											"pm.test(\"id exists\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{FEED_B_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n\t\t  \"PlainTextRegular009\": \"Text1\",\n\t\t  \"PlainTextFreeTypedList009\": [\"Text1\",\"Text2\"],\n\t\t  \"PlainTextSingleSelectList009\": \"value1\",\n\t\t  \"PlainTextMultiSelectList009\": [\"value1\",\"value2\"], \n\t\t  \"PlainTextComboList009\": \"value1\",\n\t\t  \"PlainTextSingleSelectDataset009\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextMultiSelectDataset009\": [\"ValueDEFAULT1\",\"ValueDEFAULT2\"],\n\t\t  \"PlainTextMultiComboList009\": [\"freevalue\",\"value1\"],\n\t\t  \"PlainTextComboDataset009\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextMultiComboDataset009\": [\"freevalue\",\"ValueDEFAULT1\"],\n\t\t  \"PlainTextKeyValuePairs009\": { \"key1\": \"value1\" },\n\t\t  \"Table009\" : \"Table\", \n\t\t  \"CodeRegular009\": \"ABC123\",\n\t\t  \"HTMLRegular009\": \"<p>Text1</p>\",\n\t\t  \"NumberRegular009\": 1,\n\t\t  \"NumberFreeTypedList009\": [111,1],\n\t\t  \"NumberSingleSelectDataset009\": 1,\n\t\t  \"CurrencyRegular009\": 1.5,\n\t\t  \"MeasureWeightgRegular009\": 1,\n\t\t  \"DateRegular009\": \"2019-07-19\",\n\t\t  \"TimeRegular009\": \"11:00\",\n\t\t  \"DateTimeRegular009\": \"2019-07-19T11:00:00.000Z\",\n\t\t  \"TrueorFalseRegular009\": true,\n\t\t  \"Media009\": \"https://s3-eu-west-1.amazonaws.com/cdn.preview.aws.eu-w1.pimberly.com/public/asset/raw/5a0edc61963a45000e888630/3992db4f/5d94adbf42d26c0017ec39bb.JPG\",\n\t\t  \"ProductSet009\": \"DNDProductToBeAdded\",\n\t\t  \"URL009\": \"test.com\",\n\t\t  \"FreeTypeURL009\": [\"test1.com\",\"test2.com\"]\n \n  \n}"
								},
								"url": {
									"raw": "{{URL_VERSION}}products/009_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"009_API_test_product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product by PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c57783a-f7d0-4174-b97d-78672b9e2088",
										"exec": [
											"pm.test(\"Primary ID is showing 009_API_test_product\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['Primary ID']).to.eql(\"009_API_test_product\");",
											"});",
											"",
											"//TESTING ATTRIBUTES ",
											"",
											"",
											"// Started checking to see if value exist, which they shouldnt ",
											"",
											"",
											"",
											"//Plain Text ",
											"",
											"pm.test(\"PlainTextRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextRegular).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextFreeTypedList does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextFreeTypedList).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextSingleSelectList does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextSingleSelectList).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextMultiSelectList does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextMultiSelectList).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextComboList does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextComboList).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextMultiComboList does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextMultiComboList).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextSingleSelectDataset does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextSingleSelectDataset).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextComboDataset does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextComboDataset).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextMultiSelectDataset does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextMultiSelectDataset).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextMultiComboDataset does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextMultiComboDataset).does.not.exist;",
											"});",
											"",
											"pm.test(\"PlainTextKey/ValuePairs does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['PlainTextKey/ValuePairs']).does.not.exist;",
											"});",
											"",
											"",
											"",
											"// // CODE ATTRIBUTE",
											"",
											"",
											"pm.test(\"CodeRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CodeRegular).does.not.exist;",
											"});",
											"",
											"// // TABLE ATTRIBUTE",
											"",
											"",
											"pm.test(\"Table does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.Table).does.not.exist;",
											"});",
											"",
											"",
											"// // HTML ATTRIBUTE",
											"",
											"",
											"pm.test(\"HTMLRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.HTMLRegular).does.not.exist;",
											"});",
											"",
											"",
											"",
											"// //NUMBER ATTRIBUTES",
											"",
											"pm.test(\"NumberRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberRegular).does.not.exist;",
											"});",
											"",
											"",
											"pm.test(\"NumberFreeTypedList does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberFreeTypedList).does.not.exist;",
											"});",
											"",
											"pm.test(\"NumberSingleSelectDataset does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberSingleSelectDataset).does.not.exist;",
											"});",
											"",
											"",
											"",
											"// // CURRENCY ATTRIBUTE",
											"",
											"",
											"pm.test(\"CurrencyRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CurrencyRegular).does.not.exist;",
											"});",
											"",
											"",
											"// // MEASURE ATTRIBUTE",
											"",
											"",
											"pm.test(\"MeasureRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MeasureRegular).does.not.exist;",
											"});",
											"",
											"",
											"// //DATE AND TIME ATTRIBUTES",
											"",
											"",
											"pm.test(\"DateRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.DateRegular).does.not.exist;",
											"});",
											"",
											"",
											"pm.test(\"TimeRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TimeRegular).does.not.exist;",
											"});",
											"",
											"",
											"pm.test(\"DateTimeRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"Date + Time\"]).does.not.exist;",
											"});",
											"",
											"",
											"",
											"// //BOOLEAN ATTRIBUTE",
											"",
											"",
											"pm.test(\"TrueorFalseRegular does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TrueorFalseRegular).does.not.exist;",
											"});",
											"",
											"",
											"// // MEDIA SET ",
											"",
											"",
											"pm.test(\"MediaSet does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MediaSet).does.not.exist;",
											"});",
											"",
											"",
											"// // PRODUCT SET ",
											"",
											"",
											"pm.test(\"ProductSet does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ProductSet).does.not.exist;",
											"});",
											"",
											"",
											"",
											"// //URL ATTRIBUTES",
											"",
											"",
											"pm.test(\"URL does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.URL).does.not.exist;",
											"});",
											"",
											"pm.test(\"FreeTypeURL does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.FreeTypeURL).does.not.exist;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{009_ChannelAPIKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/009_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"009_API_test_product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Product by PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "449ec4b7-62a6-40eb-9d76-404d0654dd39",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.status).to.eql(200);",
											"});",
											"",
											"pm.test(\"message shows the deleted product\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.message).to.eql(\"Deleted product: 009_API_test_product\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{FEED_A_KEY}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/009_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"009_API_test_product"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "48d49fc2-157c-4c8a-b039-a7ebf63717f2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "551e2410-9297-492c-b7ad-e94edd1c90eb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "011-All attributes with a source of ANY, a master of NONE, already populated by any source, cannot be updated via API Feed A",
					"item": [
						{
							"name": "Create a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7521f738-0b9a-4302-be13-f6b471a13ee3",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows created product Primary ID\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Created 011_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"011_API_test_product\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "yg5r9EU6eqvD10y2GkCwEV2181z26CafjgIMtigm5OsRIMHONBcDka3tKbRuOtlg"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"primaryId\":\"011_API_test_product\",\n  \"typeId\":\"SKU\",\n  \"schemaId\":\"{{011_SchemaID}}\",\n  \"attributes\" : {\n  \t\n  \t\"PrimaryDescription\" : \"Updated\"\n  \t\n  \t\n  }\n\n\n\n  \n }"
								},
								"url": {
									"raw": "{{URL_VERSION}}products",
									"host": [
										"{{URL_VERSION}}products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update product by PrimaryID Feed B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "725a0410-0821-42de-be56-7ca0c340b0a1",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows product thats been updated\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.message).to.eql(\"Updated 011_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.primaryId).to.eql(\"011_API_test_product\");",
											"});",
											"",
											"pm.test(\"id exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{FEED_B_KEY}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n\t\t  \"PlainTextRegular011\": \"Text1\",\n\t\t  \"PlainTextFreeTypedList011\": [\"Text1\",\"Text2\"],\n\t\t  \"PlainTextSingleSelectList011\": \"value1\",\n\t\t  \"PlainTextMultiSelectList011\": [\"value1\",\"value2\"], \n\t\t  \"PlainTextComboList011\": \"value1\",\n\t\t  \"PlainTextSingleSelectDataset011\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextMultiSelectDataset011\": [\"ValueDEFAULT1\",\"ValueDEFAULT2\"],\n\t\t  \"PlainTextMultiComboList011\": [\"freevalue\",\"value1\"],\n\t\t  \"PlainTextComboDataset011\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextMultiComboDataset011\": [\"freevalue\",\"ValueDEFAULT1\"],\n\t\t  \"PlainTextKeyValuePairs011\": { \"key1\": \"value1\" },\n\t\t  \"Table011\" : \"Table\", \n\t\t  \"CodeRegular011\": \"ABC123\",\n\t\t  \"HTMLRegular011\": \"<p>Text1</p>\",\n\t\t  \"NumberRegular011\": 1,\n\t\t  \"NumberFreeTypedList011\": [111,1],\n\t\t  \"NumberSingleSelectDataset011\": 1,\n\t\t  \"CurrencyRegular011\": 1.5,\n\t\t  \"MeasureRegular011\": 1,\n\t\t  \"DateRegular011\": \"2019-07-19\",\n\t\t  \"TimeRegular011\": \"11:00\",\n\t\t  \"DateTimeRegular011\": \"2019-07-19T11:00:00.000Z\",\n\t\t  \"TrueorFalseRegular011\": true,\n\t\t  \"MediaSet011\": \"5da5a3f0688c5a30a1bff4f7\",\n\t\t  \"ProductSet011\": \"5dc136f496ebf800172307f8\",\n\t\t  \"URL011\": \"test.com\",\n\t\t  \"FreeTypeURL011\": [\"test1.com\",\"test2.com\"]\n \n  \n}"
								},
								"url": {
									"raw": "{{URL_VERSION}}products/011_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"011_API_test_product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update product by PrimaryID Feed A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "952907fd-099b-4c22-b3b0-8ede9149fc1f",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows product thats been updated\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Updated 011_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"011_API_test_product\");",
											"});",
											"",
											"pm.test(\"id exists\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{FEED_A_KEY}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n\t\t  \"PlainTextRegular011\": \"Text2\",\n\t\t  \"PlainTextFreeTypedList011\": [\"Text2\",\"Text3\"],\n\t\t  \"PlainTextSingleSelectList011\": \"value2\",\n\t\t  \"PlainTextMultiSelectList011\": [\"value2\",\"value3\"], \n\t\t  \"PlainTextComboList011\": \"value2\",\n\t\t  \"PlainTextSingleSelectDataset011\": \"ValueDEFAULT2\",\n\t\t  \"PlainTextMultiSelectDataset011\": [\"ValueDEFAULT2\",\"ValueDEFAULT3\"],\n\t\t  \"PlainTextMultiComboList011\": [\"freevalue2\",\"value2\"],\n\t\t  \"PlainTextComboDataset011\": \"ValueDEFAULT2\",\n\t\t  \"PlainTextMultiComboDataset011\": [\"freevalue2\",\"ValueDEFAULT2\"],\n\t\t  \"PlainTextKeyValuePairs011\": { \"key1\": \"value2\" },\n\t\t  \"Table011\" : \"Table2\", \n\t\t  \"CodeRegular011\": \"ABC123666\",\n\t\t  \"HTMLRegular011\": \"<p>Text2</p>\",\n\t\t  \"NumberRegular011\": 2,\n\t\t  \"NumberFreeTypedList011\": [222,2],\n\t\t  \"NumberSingleSelectDataset011\": 2,\n\t\t  \"CurrencyRegular011\": 2.5,\n\t\t  \"MeasureWeightgRegular011\": 2,\n\t\t  \"DateRegular011\": \"2019-07-20\",\n\t\t  \"TimeRegular011\": \"12:00\",\n\t\t  \"DateTimeRegular011\": \"2019-07-20T11:00:00.000Z\",\n\t\t  \"TrueorFalseRegular011\": false,\n\t\t  \"MediaSet011\": \"5da5a3f0688c5a30a1bff4f7\",\n\t\t  \"ProductSet011\": \"5dc136f496ebf800172307f8\",\n\t\t  \"URL011\": \"test2.com\",\n\t\t  \"FreeTypeURL011\": [\"test2.com\",\"test3.com\"]\n \n  \n}"
								},
								"url": {
									"raw": "{{URL_VERSION}}products/011_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"011_API_test_product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product by PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "584fbf53-a7a9-49d8-ac7e-aa674a4ca95d",
										"exec": [
											"pm.test(\"Primary ID is showing 011_API_test_product\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['Primary ID']).to.eql(\"011_API_test_product\");",
											"});",
											"",
											"//TESTING ATTRIBUTES ",
											"",
											"",
											"//Plain Text ",
											"",
											"pm.test(\"PlainTextRegular is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextRegular).to.eql(\"Text1\");",
											"});",
											"",
											"pm.test(\"PlainTextFreeTypedList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"Text1\", \"Text2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextFreeTypedList.length; i++) {",
											"        pm.expect(jsonData.PlainTextFreeTypedList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextSingleSelectList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextSingleSelectList).to.eql(\"value1\");",
											"});",
											"",
											"pm.test(\"PlainTextMultiSelectList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"value1\", \"value2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiSelectList.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiSelectList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"PlainTextComboList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextComboList).to.eql(\"value1\");",
											"});",
											"",
											"",
											"pm.test(\"PlainTextMultiComboList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"freevalue\", \"value1\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiComboList.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiComboList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextSingleSelectDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextSingleSelectDataset).to.eql(\"ValueDEFAULT1\");",
											"});",
											"",
											"pm.test(\"PlainTextComboDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextComboDataset).to.eql(\"ValueDEFAULT1\");",
											"});",
											"",
											"",
											"pm.test(\"PlainTextMulitSelectDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"ValueDEFAULT1\", \"ValueDEFAULT2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiSelectDataset.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiSelectDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"PlainTextMultiComboDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"freevalue\", \"ValueDEFAULT1\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiComboDataset.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiComboDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextKey/ValuePairs is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"value1\"];",
											"",
											"    for (var i = 0; i < jsonData['PlainTextKey/ValuePairs'].length; i++) {",
											"        pm.expect(jsonData['PlainTextKey/ValuePairs'][i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"// CODE ATTRIBUTE",
											"",
											"",
											"pm.test(\"CodeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CodeRegular).to.eql(\"ABC123\");",
											"});",
											"",
											"// TABLE ATTRIBUTE",
											"",
											"",
											"pm.test(\"Table is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.Table).to.eql(\"Table\");",
											"});",
											"",
											"",
											"// HTML ATTRIBUTE",
											"",
											"",
											"pm.test(\"HTMLRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.HTMLRegular).to.eql(\"<p>Text1</p>\");",
											"});",
											"",
											"",
											"",
											"//NUMBER ATTRIBUTES",
											"",
											"pm.test(\"NumberRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberRegular).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"NumberFreeTypedList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [111, 1];",
											"",
											"    for (var i = 0; i < jsonData.NumberFreeTypedList.length; i++) {",
											"        pm.expect(jsonData.NumberFreeTypedList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"NumberSingleSelectDataset is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberSingleSelectDataset).to.eql(\"1\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											"// CURRENCY ATTRIBUTE",
											"",
											"",
											"pm.test(\"CurrencyRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CurrencyRegular).to.eql(\"1.50\");",
											"});",
											"",
											"",
											"// MEASURE ATTRIBUTE",
											"",
											"",
											"pm.test(\"MeasureRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MeasureRegular).to.eql(1);",
											"});",
											"",
											"",
											"//DATE AND TIME ATTRIBUTES",
											"",
											"",
											"pm.test(\"DateRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.DateRegular).to.eql(\"2019/07/19\");",
											"});",
											"",
											"",
											"pm.test(\"TimeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TimeRegular).to.eql(\"11:00\");",
											"});",
											"",
											"",
											"pm.test(\"DateTimeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"Date + Time\"]).to.eql(\"2019/07/19 11:00\");",
											"});",
											"",
											"",
											"",
											"//BOOLEAN ATTRIBUTE",
											"",
											"",
											"pm.test(\"TrueorFalseRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TrueorFalseRegular).to.eql(\"1\");",
											"});",
											"",
											"",
											"// MEDIA SET ",
											"",
											"",
											"pm.test(\"MediaSet is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MediaSet[0]).to.eql(\"https://cdn.preview.pimber.ly/public/asset/raw/5a0edc61963a45000e888630/7d531b65/5d7607c08dcb2b5efa000010.jpg\");",
											"});",
											"",
											"",
											"// PRODUCT SET ",
											"",
											"",
											"pm.test(\"ProductSet is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ProductSet[0]).to.eql(\"DNDProductToBeAdded\");",
											"});",
											"",
											"",
											"",
											"//URL ATTRIBUTES",
											"",
											"",
											"pm.test(\"URL is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.URL).to.eql(\"test.com\");",
											"});",
											"",
											"",
											"pm.test(\"FreeTypeURL is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"test1.com\", \"test2.com\"];",
											"",
											"    for (var i = 0; i < jsonData.FreeTypeURL.length; i++) {",
											"        pm.expect(jsonData.FreeTypeURL[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{011_ChannelAPIKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/011_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"011_API_test_product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete product by PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2dba20f5-6003-415d-a15b-9f63297ecb16",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.status).to.eql(200);",
											"});",
											"",
											"pm.test(\"message shows the deleted product\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.message).to.eql(\"Deleted product: 011_API_test_product\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{FEED_A_KEY}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/011_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"011_API_test_product"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "012-All attributes with a source of ANY, a master of LATCH, already populated by Feed A, can be updated by Feed A",
					"item": [
						{
							"name": "Create a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d72af4ca-a212-48d8-bd46-cc428a83791e",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows created product Primary ID\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Created 012_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"012_API_test_product\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{FEED_A_KEY}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"primaryId\":\"012_API_test_product\",\n  \"typeId\":\"SKU\",\n  \"schemaId\":\"{{012_SchemaID}}\",\n  \"attributes\" : {\n  \t\n  \t\"PrimaryDescription\" : \"Updated\"\n  \t\n  \t\n  }\n\n\n\n  \n }"
								},
								"url": {
									"raw": "{{URL_VERSION}}products",
									"host": [
										"{{URL_VERSION}}products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update product by PrimaryID by Feed A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36bdb72f-dce9-4d77-b937-8916b59df1e5",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows product thats been updated\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Updated 012_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"012_API_test_product\");",
											"});",
											"",
											"pm.test(\"id exists\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{FEED_A_KEY}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n\t\t  \"PlainTextRegular012\": \"Text2\",\n\t\t  \"PlainTextFreeTypedList012\": [\"Text2\",\"Text3\"],\n\t\t  \"PlainTextSingleSelectList012\": \"value2\",\n\t\t  \"PlainTextMultiSelectList012\": [\"value2\",\"value3\"], \n\t\t  \"PlainTextComboList012\": \"value2\",\n\t\t  \"PlainTextSingleSelectDataset012\": \"ValueDEFAULT2\",\n\t\t  \"PlainTextMultiSelectDataset012\": [\"ValueDEFAULT2\",\"ValueDEFAULT3\"],\n\t\t  \"PlainTextMultiComboList012\": [\"freevalue2\",\"value2\"],\n\t\t  \"PlainTextComboDataset012\": \"ValueDEFAULT2\",\n\t\t  \"PlainTextMultiComboDataset012\": [\"freevalue2\",\"ValueDEFAULT2\"],\n\t\t  \"PlainTextKeyValuePairs012\": { \"key1\": \"value2\" },\n\t\t  \"Table012\" : \"Table2\", \n\t\t  \"CodeRegular012\": \"ABC123666\",\n\t\t  \"HTMLRegular012\": \"<p>Text2</p>\",\n\t\t  \"NumberRegular012\": 2,\n\t\t  \"NumberFreeTypedList012\": [222,2],\n\t\t  \"NumberSingleSelectDataset012\": 2,\n\t\t  \"CurrencyRegular012\": 2.5,\n\t\t  \"MeasureRegular012\": 2,\n\t\t  \"DateRegular012\": \"2019-07-20\",\n\t\t  \"TimeRegular012\": \"12:00\",\n\t\t  \"DateTimeRegular012\": \"2019-07-20T11:00:00.000Z\",\n\t\t  \"TrueorFalseRegular012\": false,\n\t\t  \"MediaSet012\": \"5d7607c08dcb2b5efa000011\",\n\t\t  \"ProductSet012\": \"5dcacc348aabd1001294fb48\",\n\t\t  \"URL012\": \"test2.com\",\n\t\t  \"FreeTypeURL012\": [\"test2.com\",\"test3.com\"]\n \n  \n}"
								},
								"url": {
									"raw": "{{URL_VERSION}}products/012_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"012_API_test_product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update product by PrimaryID by Feed A  with a different values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58fcb12e-924f-43ac-8f06-b709995cac0e",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows product thats been updated\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.message).to.eql(\"Updated 012_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.primaryId).to.eql(\"012_API_test_product\");",
											"});",
											"",
											"pm.test(\"id exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{FEED_A_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n\t\t  \"PlainTextRegular012\": \"Text1\",\n\t\t  \"PlainTextFreeTypedList012\": [\"Text1\",\"Text2\"],\n\t\t  \"PlainTextSingleSelectList012\": \"value1\",\n\t\t  \"PlainTextMultiSelectList012\": [\"value1\",\"value2\"], \n\t\t  \"PlainTextComboList012\": \"value1\",\n\t\t  \"PlainTextSingleSelectDataset012\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextMultiSelectDataset012\": [\"ValueDEFAULT1\",\"ValueDEFAULT2\"],\n\t\t  \"PlainTextMultiComboList012\": [\"freevalue\",\"value1\"],\n\t\t  \"PlainTextComboDataset012\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextMultiComboDataset012\": [\"freevalue\",\"ValueDEFAULT1\"],\n\t\t  \"PlainTextKeyValuePairs012\": { \"key1\": \"value1\" },\n\t\t  \"Table012\" : \"Table\", \n\t\t  \"CodeRegular012\": \"ABC123\",\n\t\t  \"HTMLRegular012\": \"<p>Text1</p>\",\n\t\t  \"NumberRegular012\": 1,\n\t\t  \"NumberFreeTypedList012\": [111,1],\n\t\t  \"NumberSingleSelectDataset012\": 1,\n\t\t  \"CurrencyRegular012\": 1.5,\n\t\t  \"MeasureRegular012\": 1,\n\t\t  \"DateRegular012\": \"2019-07-19\",\n\t\t  \"TimeRegular012\": \"11:00\",\n\t\t  \"DateTimeRegular012\": \"2019-07-19T11:00:00.000Z\",\n\t\t  \"TrueorFalseRegular012\": true,\n\t\t  \"MediaSet012\": \"5da5a3f0688c5a30a1bff4f7\",\n\t\t  \"ProductSet012\": \"5dc136f496ebf800172307f8\",\n\t\t  \"URL012\": \"test.com\",\n\t\t  \"FreeTypeURL012\": [\"test1.com\",\"test2.com\"]\n \n  \n}"
								},
								"url": {
									"raw": "{{URL_VERSION}}products/012_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"012_API_test_product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product by Primary ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c0ccb91-8ad4-43d1-9170-f657a420a90a",
										"exec": [
											"pm.test(\"Primary ID is showing 012_API_test_product\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['Primary ID']).to.eql(\"012_API_test_product\");",
											"});",
											"",
											"//TESTING ATTRIBUTES ",
											"",
											"",
											"//Plain Text ",
											"",
											"pm.test(\"PlainTextRegular is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextRegular).to.eql(\"Text1\");",
											"});",
											"",
											"pm.test(\"PlainTextFreeTypedList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"Text1\", \"Text2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextFreeTypedList.length; i++) {",
											"        pm.expect(jsonData.PlainTextFreeTypedList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextSingleSelectList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextSingleSelectList).to.eql(\"value1\");",
											"});",
											"",
											"pm.test(\"PlainTextMultiSelectList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"value1\", \"value2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiSelectList.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiSelectList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"PlainTextComboList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextComboList).to.eql(\"value1\");",
											"});",
											"",
											"",
											"pm.test(\"PlainTextMultiComboList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"freevalue\", \"value1\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiComboList.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiComboList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextSingleSelectDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextSingleSelectDataset).to.eql(\"ValueDEFAULT1\");",
											"});",
											"",
											"pm.test(\"PlainTextComboDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextComboDataset).to.eql(\"ValueDEFAULT1\");",
											"});",
											"",
											"",
											"pm.test(\"PlainTextMulitSelectDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"ValueDEFAULT1\", \"ValueDEFAULT2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiSelectDataset.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiSelectDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"PlainTextMultiComboDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"freevalue\", \"ValueDEFAULT1\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiComboDataset.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiComboDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextKey/ValuePairs is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"value1\"];",
											"",
											"    for (var i = 0; i < jsonData['PlainTextKey/ValuePairs'].length; i++) {",
											"        pm.expect(jsonData['PlainTextKey/ValuePairs'][i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"// CODE ATTRIBUTE",
											"",
											"",
											"pm.test(\"CodeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CodeRegular).to.eql(\"ABC123\");",
											"});",
											"",
											"// TABLE ATTRIBUTE",
											"",
											"",
											"pm.test(\"Table is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.Table).to.eql(\"Table\");",
											"});",
											"",
											"",
											"// HTML ATTRIBUTE",
											"",
											"",
											"pm.test(\"HTMLRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.HTMLRegular).to.eql(\"<p>Text1</p>\");",
											"});",
											"",
											"",
											"",
											"//NUMBER ATTRIBUTES",
											"",
											"pm.test(\"NumberRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberRegular).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"NumberFreeTypedList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [111, 1];",
											"",
											"    for (var i = 0; i < jsonData.NumberFreeTypedList.length; i++) {",
											"        pm.expect(jsonData.NumberFreeTypedList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"NumberSingleSelectDataset is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberSingleSelectDataset).to.eql(1);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"// CURRENCY ATTRIBUTE",
											"",
											"",
											"pm.test(\"CurrencyRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CurrencyRegular).to.eql(\"1.50\");",
											"});",
											"",
											"",
											"// MEASURE ATTRIBUTE",
											"",
											"",
											"pm.test(\"MeasureRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MeasureRegular).to.eql(1);",
											"});",
											"",
											"",
											"//DATE AND TIME ATTRIBUTES",
											"",
											"",
											"pm.test(\"DateRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.DateRegular).to.eql(\"2019/07/19\");",
											"});",
											"",
											"",
											"pm.test(\"TimeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TimeRegular).to.eql(\"11:00\");",
											"});",
											"",
											"",
											"pm.test(\"DateTimeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"Date + Time\"]).to.eql(\"2019/07/19 11:00\");",
											"});",
											"",
											"",
											"",
											"//BOOLEAN ATTRIBUTE",
											"",
											"",
											"pm.test(\"TrueorFalseRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TrueorFalseRegular).to.eql(\"1\");",
											"});",
											"",
											"",
											"// MEDIA SET ",
											"",
											"",
											"pm.test(\"MediaSet is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MediaSet[0]).to.eql(\"https://cdn.preview.pimber.ly/public/asset/raw/5a0edc61963a45000e888630/7d531b65/5d7607c08dcb2b5efa000010.jpg\");",
											"});",
											"",
											"",
											"// PRODUCT SET ",
											"",
											"",
											"pm.test(\"ProductSet is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ProductSet[0]).to.eql(\"DNDProductToBeAdded\");",
											"});",
											"",
											"",
											"",
											"//URL ATTRIBUTES",
											"",
											"",
											"pm.test(\"URL is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.URL).to.eql(\"test.com\");",
											"});",
											"",
											"",
											"pm.test(\"FreeTypeURL is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"test1.com\", \"test2.com\"];",
											"",
											"    for (var i = 0; i < jsonData.FreeTypeURL.length; i++) {",
											"        pm.expect(jsonData.FreeTypeURL[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{012_ChannelAPIKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "javascript"
										}
									}
								},
								"url": {
									"raw": "{{URL_VERSION}}products/012_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"012_API_test_product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete product by PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75f01aad-0cfb-44e3-b00f-c65ded918a32",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(200);",
											"});",
											"",
											"pm.test(\"message shows the deleted product\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Deleted product: 012_API_test_product\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{FEED_A_KEY}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/012_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"012_API_test_product"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "013-All attributes with a source of ANY, a master of LATCH, already populated by Feed A, cannot be updated by Feed B",
					"item": [
						{
							"name": "Create a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7632ba5-b989-4010-b702-a1a387597cf4",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows created product Primary ID\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Created 013_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"013_API_test_product\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{FEED_A_KEY}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"primaryId\":\"013_API_test_product\",\n  \"typeId\":\"SKU\",\n  \"schemaId\":\"{{013_SchemaID}}\",\n  \"attributes\" : {\n  \t\n  \t\"PrimaryDescription\" : \"Updated\"\n  \t\n  \t\n  }\n\n\n\n  \n }"
								},
								"url": {
									"raw": "{{URL_VERSION}}products",
									"host": [
										"{{URL_VERSION}}products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update product by PrimaryID by Feed A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b60f2cb-d066-46dc-914c-a4b41a7a1444",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows product thats been updated\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Updated 013_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"013_API_test_product\");",
											"});",
											"",
											"pm.test(\"id exists\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{FEED_B_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n\t\t  \"PlainTextRegular013\": \"Text1\",\n\t\t  \"PlainTextFreeTypedList013\": [\"Text1\",\"Text2\"],\n\t\t  \"PlainTextSingleSelectList013\": \"value1\",\n\t\t  \"PlainTextMultiSelectList013\": [\"value1\",\"value2\"], \n\t\t  \"PlainTextComboList013\": \"value1\",\n\t\t  \"PlainTextSingleSelectDataset013\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextMultiSelectDataset013\": [\"ValueDEFAULT1\",\"ValueDEFAULT2\"],\n\t\t  \"PlainTextMultiComboList013\": [\"freevalue\",\"value1\"],\n\t\t  \"PlainTextComboDataset013\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextMultiComboDataset013\": [\"freevalue\",\"ValueDEFAULT1\"],\n\t\t  \"PlainTextKeyValuePairs013\": { \"key1\": \"value1\" },\n\t\t  \"Table013\" : \"Table\", \n\t\t  \"CodeRegular013\": \"ABC123\",\n\t\t  \"HTMLRegular013\": \"<p>Text1</p>\",\n\t\t  \"NumberRegular013\": 1,\n\t\t  \"NumberFreeTypedList013\": [111,1],\n\t\t  \"NumberSingleSelectDataset013\": 1,\n\t\t  \"CurrencyRegular013\": 1.5,\n\t\t  \"MeasureRegular013\": 1,\n\t\t  \"DateRegular013\": \"2019-07-19\",\n\t\t  \"TimeRegular013\": \"11:00\",\n\t\t  \"DateTimeRegular013\": \"2019-07-19T11:00:00.000Z\",\n\t\t  \"TrueorFalseRegular013\": true,\n\t\t  \"MediaSet013\": \"5da5a3f0688c5a30a1bff4f7\",\n\t\t  \"ProductSet013\": \"5dc136f496ebf800172307f8\",\n\t\t  \"URL013\": \"test.com\",\n\t\t  \"FreeTypeURL013\": [\"test1.com\",\"test2.com\"]\n \n  \n}"
								},
								"url": {
									"raw": "{{URL_VERSION}}products/013_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"013_API_test_product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update product by PrimaryID by Feed B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdb13050-8c26-4335-b761-22d4c5820008",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows product thats been updated\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Updated 013_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"013_API_test_product\");",
											"});",
											"",
											"pm.test(\"id exists\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{FEED_A_KEY}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n\t\t  \"PlainTextRegular013\": \"Text2\",\n\t\t  \"PlainTextFreeTypedList013\": [\"Text2\",\"Text3\"],\n\t\t  \"PlainTextSingleSelectList013\": \"value2\",\n\t\t  \"PlainTextMultiSelectList013\": [\"value2\",\"value3\"], \n\t\t  \"PlainTextComboList013\": \"value2\",\n\t\t  \"PlainTextSingleSelectDataset013\": \"ValueDEFAULT2\",\n\t\t  \"PlainTextMultiSelectDataset013\": [\"ValueDEFAULT2\",\"ValueDEFAULT3\"],\n\t\t  \"PlainTextMultiComboList013\": [\"freevalue2\",\"value2\"],\n\t\t  \"PlainTextComboDataset013\": \"ValueDEFAULT2\",\n\t\t  \"PlainTextMultiComboDataset013\": [\"freevalue2\",\"ValueDEFAULT2\"],\n\t\t  \"PlainTextKeyValuePairs013\": { \"key1\": \"value2\" },\n\t\t  \"Table013\" : \"Table2\", \n\t\t  \"CodeRegular013\": \"ABC123666\",\n\t\t  \"HTMLRegular013\": \"<p>Text2</p>\",\n\t\t  \"NumberRegular013\": 2,\n\t\t  \"NumberFreeTypedList013\": [222,2],\n\t\t  \"NumberSingleSelectDataset013\": 2,\n\t\t  \"CurrencyRegular013\": 2.5,\n\t\t  \"MeasureWeightgRegular013\": 2,\n\t\t  \"DateRegular013\": \"2019-07-20\",\n\t\t  \"TimeRegular013\": \"12:00\",\n\t\t  \"DateTimeRegular013\": \"2019-07-20T11:00:00.000Z\",\n\t\t  \"TrueorFalseRegular013\": false,\n\t\t  \"Media013\": \"https://s3-eu-west-1.amazonaws.com/cdn.preview.aws.eu-w1.pimberly.com/public/asset/raw/5a0edc61963a45000e888630/7d531b65/5d7607c08dcb2b5efa000012.jpg\",\n\t\t  \"ProductSet013\": \"DNDProductToBeAdded2\",\n\t\t  \"URL013\": \"test2.com\",\n\t\t  \"FreeTypeURL013\": [\"test2.com\",\"test3.com\"]\n \n  \n}"
								},
								"url": {
									"raw": "{{URL_VERSION}}products/013_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"013_API_test_product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product by Primary ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3b4a26d-8fd8-4f01-a82e-ab83e7bfa412",
										"exec": [
											"pm.test(\"Primary ID is showing 013_API_test_product\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['Primary ID']).to.eql(\"013_API_test_product\");",
											"});",
											"",
											"//TESTING ATTRIBUTES ",
											"",
											"",
											"//Plain Text ",
											"",
											"pm.test(\"PlainTextRegular is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextRegular).to.eql(\"Text1\");",
											"});",
											"",
											"pm.test(\"PlainTextFreeTypedList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"Text1\", \"Text2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextFreeTypedList.length; i++) {",
											"        pm.expect(jsonData.PlainTextFreeTypedList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextSingleSelectList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextSingleSelectList).to.eql(\"value1\");",
											"});",
											"",
											"pm.test(\"PlainTextMultiSelectList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"value1\", \"value2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiSelectList.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiSelectList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"PlainTextComboList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextComboList).to.eql(\"value1\");",
											"});",
											"",
											"",
											"pm.test(\"PlainTextMultiComboList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"freevalue\", \"value1\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiComboList.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiComboList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextSingleSelectDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextSingleSelectDataset).to.eql(\"ValueDEFAULT1\");",
											"});",
											"",
											"pm.test(\"PlainTextComboDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextComboDataset).to.eql(\"ValueDEFAULT1\");",
											"});",
											"",
											"",
											"pm.test(\"PlainTextMulitSelectDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"ValueDEFAULT1\", \"ValueDEFAULT2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiSelectDataset.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiSelectDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"PlainTextMultiComboDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"freevalue\", \"ValueDEFAULT1\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiComboDataset.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiComboDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextKey/ValuePairs is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"value1\"];",
											"",
											"    for (var i = 0; i < jsonData['PlainTextKey/ValuePairs'].length; i++) {",
											"        pm.expect(jsonData['PlainTextKey/ValuePairs'][i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"// CODE ATTRIBUTE",
											"",
											"",
											"pm.test(\"CodeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CodeRegular).to.eql(\"ABC123\");",
											"});",
											"",
											"// TABLE ATTRIBUTE",
											"",
											"",
											"pm.test(\"Table is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.Table).to.eql(\"Table\");",
											"});",
											"",
											"",
											"// HTML ATTRIBUTE",
											"",
											"",
											"pm.test(\"HTMLRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.HTMLRegular).to.eql(\"<p>Text1</p>\");",
											"});",
											"",
											"",
											"",
											"//NUMBER ATTRIBUTES",
											"",
											"pm.test(\"NumberRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberRegular).to.eql(\"1\");",
											"});",
											"",
											"",
											"pm.test(\"NumberFreeTypedList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [111, 1];",
											"",
											"    for (var i = 0; i < jsonData.NumberFreeTypedList.length; i++) {",
											"        pm.expect(jsonData.NumberFreeTypedList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"NumberSingleSelectDataset is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberSingleSelectDataset).to.eql(1);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"// CURRENCY ATTRIBUTE",
											"",
											"",
											"pm.test(\"CurrencyRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CurrencyRegular).to.eql(\"1.50\");",
											"});",
											"",
											"",
											"// MEASURE ATTRIBUTE",
											"",
											"",
											"pm.test(\"MeasureRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MeasureRegular).to.eql(1);",
											"});",
											"",
											"",
											"//DATE AND TIME ATTRIBUTES",
											"",
											"",
											"pm.test(\"DateRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.DateRegular).to.eql(\"2019/07/19\");",
											"});",
											"",
											"",
											"pm.test(\"TimeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TimeRegular).to.eql(\"11:00\");",
											"});",
											"",
											"",
											"pm.test(\"DateTimeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"Date + Time\"]).to.eql(\"2019/07/19 11:00\");",
											"});",
											"",
											"",
											"",
											"//BOOLEAN ATTRIBUTE",
											"",
											"",
											"pm.test(\"TrueorFalseRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TrueorFalseRegular).to.eql(\"1\");",
											"});",
											"",
											"",
											"// MEDIA SET ",
											"",
											"",
											"pm.test(\"MediaSet is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MediaSet[0]).to.eql(\"https://cdn.preview.pimber.ly/public/asset/raw/5a0edc61963a45000e888630/7d531b65/5d7607c08dcb2b5efa000010.jpg\");",
											"});",
											"",
											"",
											"// PRODUCT SET ",
											"",
											"",
											"pm.test(\"ProductSet is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ProductSet[0]).to.eql(\"DNDProductToBeAdded\");",
											"});",
											"",
											"",
											"",
											"//URL ATTRIBUTES",
											"",
											"",
											"pm.test(\"URL is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.URL).to.eql(\"test.com\");",
											"});",
											"",
											"",
											"pm.test(\"FreeTypeURL is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"test1.com\", \"test2.com\"];",
											"",
											"    for (var i = 0; i < jsonData.FreeTypeURL.length; i++) {",
											"        pm.expect(jsonData.FreeTypeURL[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{013_ChannelAPIKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "javascript"
										}
									}
								},
								"url": {
									"raw": "{{URL_VERSION}}products/013_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"013_API_test_product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete product by PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd668fff-b735-49be-9c21-43dcfd4c0957",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(200);",
											"});",
											"",
											"pm.test(\"message shows the deleted product\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Deleted product: 013_API_test_product\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{FEED_B_KEY}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/013_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"013_API_test_product"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "014-All attributes with a source of ANY, a master of PIMBERLY USERS, already populated by any source, cannot be updated via API Feed A",
					"item": [
						{
							"name": "Create a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18cf3a58-1b79-4ed7-84f2-0730d245e498",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows created product Primary ID\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Created 014_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"014_API_test_product\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{FEED_A_KEY}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"primaryId\":\"014_API_test_product\",\n  \"typeId\":\"SKU\",\n  \"schemaId\":\"{{014_SchemaID}}\",\n  \"attributes\" : {\n  \t\n  \t\"PrimaryDescription\" : \"Updated\"\n  \t\n  \t\n  }\n\n\n\n  \n }"
								},
								"url": {
									"raw": "{{URL_VERSION}}products",
									"host": [
										"{{URL_VERSION}}products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update product by PrimaryID by Feed B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ddd1cf5-c242-468d-b86f-66681ae3d966",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows product thats been updated\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Updated 014_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"014_API_test_product\");",
											"});",
											"",
											"pm.test(\"id exists\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{FEED_B_KEY}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n\t\t  \"PlainTextRegular014\": \"Text1\",\n\t\t  \"PlainTextFreeTypedList014\": [\"Text1\",\"Text2\"],\n\t\t  \"PlainTextSingleSelectList014\": \"value1\",\n\t\t  \"PlainTextMultiSelectList014\": [\"value1\",\"value2\"], \n\t\t  \"PlainTextComboList014\": \"value1\",\n\t\t  \"PlainTextSingleSelectDataset014\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextMultiSelectDataset014\": [\"ValueDEFAULT1\",\"ValueDEFAULT2\"],\n\t\t  \"PlainTextMultiComboList014\": [\"freevalue\",\"value1\"],\n\t\t  \"PlainTextComboDataset014\": \"ValueDEFAULT1\",\n\t\t  \"PlainTextMultiComboDataset014\": [\"freevalue\",\"ValueDEFAULT1\"],\n\t\t  \"PlainTextKeyValuePairs014\": { \"key1\": \"value1\" },\n\t\t  \"Table014\" : \"Table\", \n\t\t  \"CodeRegular014\": \"ABC123\",\n\t\t  \"HTMLRegular014\": \"<p>Text1</p>\",\n\t\t  \"NumberRegular014\": 1,\n\t\t  \"NumberFreeTypedList014\": [111,1],\n\t\t  \"NumberSingleSelectDataset014\": 1,\n\t\t  \"CurrencyRegular014\": 1.5,\n\t\t  \"MeasureRegular014\": 1,\n\t\t  \"DateRegular014\": \"2019-07-19\",\n\t\t  \"TimeRegular014\": \"11:00\",\n\t\t  \"DateTimeRegular014\": \"2019-07-19T11:00:00.000Z\",\n\t\t  \"TrueorFalseRegular014\": true,\n\t\t  \"MediaSet014\": \"5da5a3f0688c5a30a1bff4f7\",\n\t\t  \"ProductSet014\": \"5dc136f496ebf800172307f8\",\n\t\t  \"URL014\": \"test.com\",\n\t\t  \"FreeTypeURL014\": [\"test1.com\",\"test2.com\"]\n \n  \n}"
								},
								"url": {
									"raw": "{{URL_VERSION}}products/014_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"014_API_test_product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update product by PrimaryID by Feed A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab89c38b-65d7-44d0-8fb3-ae111cf6323d",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"message shows product thats been updated\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Updated 014_API_test_product\");",
											"});",
											"",
											"pm.test(\"primaryId is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.primaryId).to.eql(\"014_API_test_product\");",
											"});",
											"",
											"pm.test(\"id exists\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{FEED_A_KEY}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n\t\t  \"PlainTextRegular014\": \"Text2\",\n\t\t  \"PlainTextFreeTypedList014\": [\"Text2\",\"Text3\"],\n\t\t  \"PlainTextSingleSelectList014\": \"value2\",\n\t\t  \"PlainTextMultiSelectList014\": [\"value2\",\"value3\"], \n\t\t  \"PlainTextComboList014\": \"value2\",\n\t\t  \"PlainTextSingleSelectDataset014\": \"ValueDEFAULT2\",\n\t\t  \"PlainTextMultiSelectDataset014\": [\"ValueDEFAULT2\",\"ValueDEFAULT3\"],\n\t\t  \"PlainTextMultiComboList014\": [\"freevalue2\",\"value2\"],\n\t\t  \"PlainTextComboDataset014\": \"ValueDEFAULT2\",\n\t\t  \"PlainTextMultiComboDataset014\": [\"freevalue2\",\"ValueDEFAULT2\"],\n\t\t  \"PlainTextKeyValuePairs014\": { \"key1\": \"value2\" },\n\t\t  \"Table014\" : \"Table2\", \n\t\t  \"CodeRegular014\": \"ABC123666\",\n\t\t  \"HTMLRegular014\": \"<p>Text2</p>\",\n\t\t  \"NumberRegular014\": 2,\n\t\t  \"NumberFreeTypedList014\": [222,2],\n\t\t  \"NumberSingleSelectDataset014\": 2,\n\t\t  \"CurrencyRegular014\": 2.5,\n\t\t  \"MeasureWeightgRegular014\": 2,\n\t\t  \"DateRegular014\": \"2019-07-20\",\n\t\t  \"TimeRegular014\": \"12:00\",\n\t\t  \"DateTimeRegular014\": \"2019-07-20T11:00:00.000Z\",\n\t\t  \"TrueorFalseRegular014\": false,\n\t\t  \"MediaSet014\": \"https://s3-eu-west-1.amazonaws.com/cdn.preview.aws.eu-w1.pimberly.com/public/asset/raw/5a0edc61963a45000e888630/7d531b65/5d7607c08dcb2b5efa000012.jpg\",\n\t\t  \"ProductSet014\": \"DNDProductToBeAdded2\",\n\t\t  \"URL014\": \"test2.com\",\n\t\t  \"FreeTypeURL014\": [\"test2.com\",\"test3.com\"]\n \n  \n}"
								},
								"url": {
									"raw": "{{URL_VERSION}}products/014_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"014_API_test_product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product by Primary ID Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0bd95bc-3321-46d7-bdde-0a93658fb539",
										"exec": [
											"pm.test(\"Primary ID is showing 014_API_test_product\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['Primary ID']).to.eql(\"014_API_test_product\");",
											"});",
											"",
											"//TESTING ATTRIBUTES ",
											"",
											"",
											"//Plain Text ",
											"",
											"pm.test(\"PlainTextRegular is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextRegular).to.eql(\"Text1\");",
											"});",
											"",
											"pm.test(\"PlainTextFreeTypedList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"Text1\", \"Text2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextFreeTypedList.length; i++) {",
											"        pm.expect(jsonData.PlainTextFreeTypedList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextSingleSelectList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextSingleSelectList).to.eql(\"value1\");",
											"});",
											"",
											"pm.test(\"PlainTextMultiSelectList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"value1\", \"value2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiSelectList.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiSelectList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"PlainTextComboList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextComboList).to.eql(\"value1\");",
											"});",
											"",
											"",
											"pm.test(\"PlainTextMultiComboList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"freevalue\", \"value1\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiComboList.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiComboList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextSingleSelectDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextSingleSelectDataset).to.eql(\"ValueDEFAULT1\");",
											"});",
											"",
											"pm.test(\"PlainTextComboDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.PlainTextComboDataset).to.eql(\"ValueDEFAULT1\");",
											"});",
											"",
											"",
											"pm.test(\"PlainTextMulitSelectDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"ValueDEFAULT1\", \"ValueDEFAULT2\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiSelectDataset.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiSelectDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"PlainTextMultiComboDataset is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"freevalue\", \"ValueDEFAULT1\"];",
											"",
											"    for (var i = 0; i < jsonData.PlainTextMultiComboDataset.length; i++) {",
											"        pm.expect(jsonData.PlainTextMultiComboDataset[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"PlainTextKey/ValuePairs is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"value1\"];",
											"",
											"    for (var i = 0; i < jsonData['PlainTextKey/ValuePairs'].length; i++) {",
											"        pm.expect(jsonData['PlainTextKey/ValuePairs'][i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"// CODE ATTRIBUTE",
											"",
											"",
											"pm.test(\"CodeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CodeRegular).to.eql(\"ABC123\");",
											"});",
											"",
											"// TABLE ATTRIBUTE",
											"",
											"",
											"pm.test(\"Table is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.Table).to.eql(\"Table\");",
											"});",
											"",
											"",
											"// HTML ATTRIBUTE",
											"",
											"",
											"pm.test(\"HTMLRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.HTMLRegular).to.eql(\"<p>Text1</p>\");",
											"});",
											"",
											"",
											"",
											"//NUMBER ATTRIBUTES",
											"",
											"pm.test(\"NumberRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberRegular).to.eql(1);",
											"});",
											"",
											"",
											"pm.test(\"NumberFreeTypedList is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [111, 1];",
											"",
											"    for (var i = 0; i < jsonData.NumberFreeTypedList.length; i++) {",
											"        pm.expect(jsonData.NumberFreeTypedList[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"NumberSingleSelectDataset is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.NumberSingleSelectDataset).to.eql(1);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"// CURRENCY ATTRIBUTE",
											"",
											"",
											"pm.test(\"CurrencyRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.CurrencyRegular).to.eql(\"1.50\");",
											"});",
											"",
											"",
											"// MEASURE ATTRIBUTE",
											"",
											"",
											"pm.test(\"MeasureRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MeasureRegular).to.eql(1);",
											"});",
											"",
											"",
											"//DATE AND TIME ATTRIBUTES",
											"",
											"",
											"pm.test(\"DateRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.DateRegular).to.eql(\"2019/07/19\");",
											"});",
											"",
											"",
											"pm.test(\"TimeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TimeRegular).to.eql(\"11:00\");",
											"});",
											"",
											"",
											"pm.test(\"DateTimeRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.DateTimeRegular).to.eql(\"2019/07/19 11:00\");",
											"});",
											"",
											"",
											"",
											"//BOOLEAN ATTRIBUTE",
											"",
											"",
											"pm.test(\"TrueorFalseRegular is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.TrueorFalseRegular).to.eql(\"1\");",
											"});",
											"",
											"",
											"// MEDIA SET ",
											"",
											"",
											"pm.test(\"MediaSet is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.MediaSet[0]).to.eql(\"https://cdn.preview.pimber.ly/public/asset/raw/5a0edc61963a45000e888630/7d531b65/5d7607c08dcb2b5efa000010.jpg\");",
											"});",
											"",
											"",
											"// PRODUCT SET ",
											"",
											"",
											"pm.test(\"ProductSet is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ProductSet[0]).to.eql(\"DNDProductToBeAdded\");",
											"});",
											"",
											"",
											"",
											"//URL ATTRIBUTES",
											"",
											"",
											"pm.test(\"URL is showing a valid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.URL).to.eql(\"test.com\");",
											"});",
											"",
											"",
											"pm.test(\"FreeTypeURL is showing valid values\", function () {",
											"    var jsonData = pm.response.json();",
											"    var strings = [\"test1.com\", \"test2.com\"];",
											"",
											"    for (var i = 0; i < jsonData.FreeTypeURL.length; i++) {",
											"        pm.expect(jsonData.FreeTypeURL[i]).to.eql(strings[i]);",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{014_ChannelAPIKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "javascript"
										}
									}
								},
								"url": {
									"raw": "{{URL_VERSION}}products/014_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"014_API_test_product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete product by PrimaryID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ba1fbfc-e99d-4a40-bdeb-21697e50ffbd",
										"exec": [
											"pm.test(\"status is successful\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.status).to.eql(200);",
											"});",
											"",
											"pm.test(\"message shows the deleted product\", function () {",
											"    var jsonData = pm.response.json();",
											"pm.expect(jsonData.data.message).to.eql(\"Deleted product: 014_API_test_product\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{FEED_A_KEY}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_VERSION}}products/014_API_test_product",
									"host": [
										"{{URL_VERSION}}products"
									],
									"path": [
										"014_API_test_product"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Tests that are able to be run to test the system",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9ed2d2f4-5a41-4c69-8216-2a1016794e82",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "77b74e9c-bbbf-4b51-b595-b32adb6aae88",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "43dfea5a-b911-44ea-b211-e1c5146c5927",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "6cf142a9-4d4a-482d-81f9-92c00be22367",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}